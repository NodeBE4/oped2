<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="https://nodebe4.github.io/oped2/feed/by_tag/Huli.xml" rel="self" type="application/atom+xml" /><link href="https://nodebe4.github.io/oped2/" rel="alternate" type="text/html" /><updated>2025-02-16T11:54:53-06:00</updated><id>https://nodebe4.github.io/oped2/feed/by_tag/Huli.xml</id><title type="html">觀點2</title><subtitle>高頻版 git.io/JUJZT</subtitle><entry><title type="html">程式導師實驗計畫第四期課程做了哪些改動？</title><link href="https://nodebe4.github.io/oped2/2020-10-04/%E7%A8%8B%E5%BC%8F%E5%B0%8E%E5%B8%AB%E5%AF%A6%E9%A9%97%E8%A8%88%E7%95%AB%E7%AC%AC%E5%9B%9B%E6%9C%9F%E8%AA%B2%E7%A8%8B%E5%81%9A%E4%BA%86%E5%93%AA%E4%BA%9B%E6%94%B9%E5%8B%95/" rel="alternate" type="text/html" title="程式導師實驗計畫第四期課程做了哪些改動？" /><published>2020-10-04T02:09:29-05:00</published><updated>2020-10-04T02:09:29-05:00</updated><id>https://nodebe4.github.io/oped2/2020-10-04/%E7%A8%8B%E5%BC%8F%E5%B0%8E%E5%B8%AB%E5%AF%A6%E9%A9%97%E8%A8%88%E7%95%AB%E7%AC%AC%E5%9B%9B%E6%9C%9F%E8%AA%B2%E7%A8%8B%E5%81%9A%E4%BA%86%E5%93%AA%E4%BA%9B%E6%94%B9%E5%8B%95%3F</id><content type="html" xml:base="https://nodebe4.github.io/oped2/2020-10-04/%E7%A8%8B%E5%BC%8F%E5%B0%8E%E5%B8%AB%E5%AF%A6%E9%A9%97%E8%A8%88%E7%95%AB%E7%AC%AC%E5%9B%9B%E6%9C%9F%E8%AA%B2%E7%A8%8B%E5%81%9A%E4%BA%86%E5%93%AA%E4%BA%9B%E6%94%B9%E5%8B%95/"><![CDATA[<!--1601795369000-->
<p><a href="https://medium.com/@hulitw/lidemy-mentor-program-4th-updates-c344302c8a2d?source=rss-f1fb3e40dc37------2">程式導師實驗計畫第四期課程做了哪些改動？</a>
——</p>

<div>
  <p>其實這一篇應該在更早一點的時間點就開始寫的，但最近要做的事情有點多，就不小心拖到現在了。</p>
  <p>每次課程結束以後，最開心的就是下一期又可以再繼續優化，把之前想做的事情一件一件慢慢付諸實現。之前在<a href="https://medium.com/@hulitw/mentor-program-3rd-result-df178bb55f4">《華麗謝幕：程式導師實驗計畫第三期成果以及未來走向》</a>裡面就有提過一些方向，後來有些真的開始做了，有些還放在 backlog 裡面。</p>
  <p>目前是程式導師實驗計畫第四期的第十六週，課程進行了 100 多天，已經進行一半了。先給幾個數字：</p>
  <ul>
    <li>這一期一共 121 位同學</li>
    <li>有 1 位在第一週時退出，另 1 位在第八週時退出，還有 9 位於課程試用期結束時（第八週）退出</li>
    <li>因此，課程正式開始後剩下 110 位同學，其中 77 人選擇 A 求職方案，剩餘 33 人選擇 B 買斷方案</li>
    <li>目前進行到第十六週，只淘汰掉 1 人，剩餘 A 方案同學為 76 人</li>
  </ul>
  <p>十四週尾聲時的進度分佈如下：</p>
  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Week 14   ：19 人（25%）Week 12~13：12 人（16%）Week 10~11：15 人（20%）Week 9    ： 8 人（10%）Week 8    ： 7 人（9%）Week 7    ： 8 人（10%）Week 7 以下： 7 人（9%）</code></pre></div>  </div>
  <p>雖然說有跟上進度的比例還是比想像中的少，但至少這一期最大的不同是，就算進度落後，大家的進度還是有在往前進。</p>
  <p>以上是有關於課程進行到現在的一些數字，接著我會來講一些這一期做的一些改動，會分成幾個部分來講：</p>
  <ol>
    <li>課程安排</li>
    <li>課綱說明</li>
    <li>作業改動</li>
    <li>課程制度</li>
  </ol>
  <h3 id="section">課程安排</h3>
  <p>先講一下在第三期發現的幾個問題：</p>
  <ol>
    <li>PHP 系列課程成效不是很好，因為資源太多太亂，節奏也沒有掌握好</li>
    <li>學生缺少一些工作流程與產品相關知識</li>
    <li>有些課程在第三期設計的有點趕，所以連我自己都很清楚知道那些課程沒有明確主旨，有點像是大雜燴混在一起</li>
    <li>切版課程提供太少，導致學生切版能力偏弱</li>
  </ol>
  <p>針對以上缺點所做的改動：</p>
  <ol>
    <li>把 PHP 課程縮減，三週變兩週，但影片整個重新錄過，提供循序漸進的教學影片讓學生跟著走，預期能夠增進理解程度</li>
    <li>新增產品開發與工作流程（Scrum）相關課程</li>
    <li>把原本很亂的大雜燴課程（SCSS + Cache + 資料結構）拿掉，把前端相關工具整理到同一週一起講。</li>
    <li>加強切版課程並且提供相關資源</li>
    <li>因應 PHP 課程縮減，把原本在很後面的 Express + Sequelize 拿到前面來教，因為這兩個我認為滿好上手的，而且要自己做 project 的時候很方便。</li>
  </ol>
  <figure>
<img alt="" src="https://cdn-images-1.medium.com/max/1024/1*ytZE6yO3Lwz1HWHF7fRxDQ.png" />    <figcaption>
PHP 課程改動後的課綱之一，我自己滿滿意的
    </figcaption>
  </figure>
  <p>第二點跟第五點因為還沒上到那邊，所以暫時無法驗證成效。在產品開發的部分，我會實際讓大家看看我之前跟 <a href="https://medium.com/u/c7713dd3b6f6">Min</a> 在開發助教系統時所採用的 JIRA board 以及相關的 ticket：</p>
  <figure>
<img alt="" src="https://cdn-images-1.medium.com/max/1024/1*4IJHA730Xe_vqDbDnkB5Cw.png" />    <figcaption>
提早讓學生體驗以後出去工作可能會用到的工具
    </figcaption>
  </figure>
  <p>根據學生目前的狀況，PHP 的改動應該算是滿有用的，至少不會像上一期一樣一堆人死在 PHP 那邊就消失了，所以這個改動還滿不錯的。</p>
  <p>大雜燴課程拿掉以後，把那兩週變成前端相關工具的教學，包括：</p>
  <ol>
    <li>jQuery</li>
    <li>SCSS</li>
    <li>Bootstrap</li>
    <li>gulp</li>
    <li>webpack</li>
  </ol>
  <p>目前感覺還挺不錯的，搭配一些作業可以讓學生更理解這些工具的使用。再者，因為前面被 CSS 跟原生的 JS 折磨很久，所以到這週也能完整體驗到工具誕生的意義，體會到有工具的好處（以及壞處）。</p>
  <p>切版的部分有在 CSS 那一週的進度提供了比較完整的版面，在其他週也都需要切版，在這一期的作業有些也有了設計稿，而且直接找以前的學生幫忙，用 zeplin 出給大家：</p>
  <figure>
<img alt="" src="https://cdn-images-1.medium.com/max/1024/1*veHgzKW3HoOaIPvJ66HG2Q.png" />    <figcaption>
zeplin 設計稿
    </figcaption>
  </figure>
  <p>課程的方向之一是盡可能讓大家提早體驗工作後的生活，所以用 zeplin 再好不過了，因為實際去工作之後就是用這樣的模式在跟設計師溝通的。</p>
  <p>總而言之呢，這一期的課綱我目前覺得 ok，學習曲線有比上一期更平滑了一些，但依然還有一些地方可以做得更好就是了。</p>
  <h3 id="section-1">課綱說明</h3>
  <p>在課綱說明上面也有一些東西想要調整。</p>
  <p>第一，以前課綱每一週的學習資源是用條列式，但這樣的話說明不夠清楚，學生會不知道順序以及要學習到什麼程度，因此第四期改成用文字敘述，清楚了很多。</p>
  <p>舉例來說，以前是這樣：</p>
  <figure>
<img alt="" src="https://cdn-images-1.medium.com/max/1024/1*FInxfaLLreDyuRtAWU4pvg.png" />    <figcaption>
第三期課綱
    </figcaption>
  </figure>
  <p>現在則變成這樣：</p>
  <figure>
<img alt="" src="https://cdn-images-1.medium.com/max/1024/1*TycwWvk4aZGqgZii8Svv_Q.png" />    <figcaption>
第四期課綱
    </figcaption>
  </figure>
  <p>第二，之前有一個問題是學生學一學有可能失去方向或是缺乏大局觀，不知道以現在的程度，大概可以做出哪些東西。於是這一期的複習周有增加一個「show time 單元」，讓我來示範以我們目前會的東西，發揮一點想像力以後可以做到什麼程度。</p>
  <p>像是第五週就做了一個公車動態的爬蟲：</p>
  <figure>
<img alt="" src="https://cdn-images-1.medium.com/max/1024/1*JMb_6OXFvFA-EJoJZ1-IlA.png" />    <figcaption>
公車動態簡易爬蟲，用各種字串處理來取出資料
    </figcaption>
  </figure>
  <p>第十週則做出了一個餐廳的網站，還有搭配 PHP 做出的活動報名系統，有簡單的 landing page、報名表單以及系統後台，可以看到有哪些人報名：</p>
  <figure>
<img alt="" src="https://cdn-images-1.medium.com/max/1024/1*dRfiJ-y08iZXKPxtSF4ksQ.png" />    <figcaption>
報名系統後台
    </figcaption>
  </figure>
  <p>這個改動我也覺得成效滿不錯的，學生可以很清楚地發現其實我在影片中寫的程式碼，都是他們看過的東西，只是不知道原來搭配起來使用之後，就變成一個網站了。另一個好處則是在 demo 的影片中，我是從頭開始把網站建起來的，他們可以看到一個工程師是怎麼樣從零開始，一步步打造出相對完整的網站。</p>
  <p>再來呢，課綱裡面每一週都有一個「自我檢測」，原本學生以為每一個列出來的都很重要，但是其實沒有，有些我只是希望他們「聽過就好」，因此這一期在自我檢測前面加上優先順序，P1 代表很重要，P2 代表還好，P3 代表聽過就好。</p>
  <figure>
<img alt="" src="https://cdn-images-1.medium.com/max/1024/1*QcUeGQ9QTTI3JheCaX4qgg.png" />    <figcaption>
加上優先順序的自我檢測
    </figcaption>
  </figure>
  <h3 id="section-2">作業改動</h3>
  <p>第四期的作業其實做了滿大的改動，許多作業都直接砍掉重練了。主要有兩個原因：</p>
  <ol>
    <li>第三期的小作業成效不好，因此決定要做規模大一點的，否則學生眼界太小。那既然要做大一點，與其一次做很大的，不如由小的慢慢堆疊上去，效果會更好</li>
    <li>如果是個從零開始的作業，難度會比較高，可是從零開始幾乎不會出現在工作上，工作都是現有網站加功能或是修 bug，因此作業也朝這方向去出，剛好可以模仿影片把東西做出來，然後藉由加新功能去熟悉。</li>
  </ol>
  <p>所以改動以後的結果是：</p>
  <ol>
    <li>以漸進增強的作業取代零散小作業</li>
    <li>雙主線作業，一條鍛鍊從零開始，另一條鍛鍊加功能以及修 bug</li>
    <li>專案完整度提高</li>
  </ol>
  <p>舉一個例子好了，第六週的作業之一是切一個餐廳的首頁（就是上面給大家看的那個 zeplin 設計稿截圖），第七週則是讓大家切一個常見問題的頁面，第八週則是抽獎活動頁面。</p>
  <p>而把這三個頁面集合起來，其實就是一個簡單的前端餐廳官網了。</p>
  <figure>
<img alt="" src="https://cdn-images-1.medium.com/max/1024/1*Pj7EMJKlpp0BO34YJD0WAA.png" />    <figcaption>
抽獎活動頁面
    </figcaption>
  </figure>
  <h3 id="section-3">課程制度</h3>
  <h4 id="section-4">助教</h4>
  <p>課程制度上面差最多的就是這一期有了助教，幾乎都是找以前的學生來擔任。會有助教主要是因為人變多了，需要人幫忙，再來就是助教會比老師距離感更近一點，預期學生問問題會更踴躍。</p>
  <p>有了助教以後，也在學習系統上面補上了交作業的機制，會隨機分配到一個助教批改，目前有大概一千多份作業：</p>
  <figure>
<img alt="" src="https://cdn-images-1.medium.com/max/1024/1*FSah1u3gakEppw4-4gzLGw.png" />    <figcaption>
作業列表截圖
    </figcaption>
  </figure>
  <p>而助教機制帶來的效益比我想像中還要高，因為他們看作業的時候都滿認真的，然後也的確達到了我一開始所預想的：「提問意願變高」這件事情。而且助教有時候也會自發性地去做一些嘗試，這些都是我一開始沒有想像到的部分。</p>
  <p>另外，助教 minw 在課程的部分也幫忙了很多，有幫我錄了一些我不是很熟的部分（CSS 相關），這邊再次感謝！</p>
  <h4 id="section-5">有關社群</h4>
  <p>說老實話，我一開始根本沒打算管什麼社群。</p>
  <p>身為一個基本上不喜歡與陌生團體交流，喜歡默默做自己事情，一路以來學習也都是靠自己居多的人，沒有體會到什麼社群的好處（這邊補充一下，也不是說沒有體會到社群的幫助，而是沒有一個「固定的小團體」之類的，受到整個網路或是論壇的幫助比較大），也不覺得學習需要跟著別人一起。</p>
  <p>可是或許我不需要沒有錯，但學生需要。</p>
  <p>無論是從第一期就開始有的進度報告制度，還是從上一期開始的小樹屋制度，其實對於同學的幫助都滿大的。在無意間，Lidemy 的程式導師實驗計畫形成了一個小小的學習社群，而且充滿著學習能量。</p>
  <p>原本只是為了看大家進度的每日進度報告，演變成學生之間彼此的精神糧食（？），因為一打開系統就可以看到好多其他同學都在繼續努力著，就會覺得有人跟著你一起學習，形成了一股督促自己的力量。</p>
  <p>當你在進度報告上寫下自己的困難時，會收到同學的關心，儘管沒有碰過面，甚至也沒有聊過幾句話，但那樣的關心還是很有力量的。也有同學會 po 一些好笑的 meme，或者是私訊同學幫助 debug，這些交流都是自動自發形成的。</p>
  <p>這一塊的效益好像遠比我想像中的還要大，以後可以再多想一下。不過要注意的是分寸要拿捏好，我希望看到這個社群是自然的，而不是很刻意而且很有壓迫性的那一種，我不喜歡那種，也不會讓這邊變成那一種。</p>
  <h3 id="section-6">自我檢討</h3>
  <p>稍微筆記幾個如果有下一期想要改進的事項。</p>
  <p>第一，課程第四週都是網路相關的，最後會用到 Node.js 上的 request 這個 library 帶大家發 request，但這不太好，第一個原因是這套已經 deprecated 了，第二個原因是這名稱很誤導，我怕有人以為這就是 request。</p>
  <p>再者，他的文件很豐富沒錯，但第一點是全英文，第二點是範例的部分可以再加強。在第四週，我希望學生培養的能力是看全英文文件，還是理解網路相關知識？是後者，所以我不該讓前者成為一個障礙。</p>
  <p>下一期我會想要自己包一個簡單的 library 並且自己寫文件，屏除這個障礙，讓大家把重心放在理解網路相關知識上面。</p>
  <p>第二，切版的課程有空的話我想整個打掉重做，因為目前的講解方式我不喜歡，比較像是先講各個屬性在幹嘛，才講怎麼使用。但我覺得比較理想的方式是邊教就可以邊帶大家切版了，不需要先把屬性講完才開始。</p>
  <p>第三，學習系統也有些功能想要加強，目前的課綱都是放在 GitHub 上，我之後想把課綱裡面的挑戰題移到學習系統上，原因是我認為進度落後太多的人，不應該讓他們看到挑戰題，因為那是給進度領先的人看的，太過於執著於要把所有題目解完，只會把進度越拖越慢，然後就很難再追上，甚至很難繼續跟著課程。</p>
  <p>因此我想限制只有進度上的人看得到挑戰題，沒在進度上的就當作沒這回事。等到課程結束，再把所有挑戰題都開放出來。</p>
  <p>第四，這是我突然想到的想法，我在想有沒有機會弄一個 knowledge base 之類的東西，或至少把我一直很想架的論壇給弄出來，這樣學生比較好搜尋過之前有沒有類似的問題，不然每一期其實都是全新的一期，但有很多東西是可以沿用的，那些問題跟回答如果能夠重用的話，幫助會很大。</p>
  <h3 id="section-7">總結</h3>
  <p>這一期的改動裡面，制度上我最喜歡的是新增的助教制度，課程上我最喜歡的是作業的改動還有 show time 這個單元，作業變得有連貫性之後規模就可以變大一些，也會強迫讓學生去改自己之前寫的程式碼，過一陣子回頭看的時候會更有感覺一些。</p>
  <p>show time 也能讓學生體會到程式的魔力，認識到自己的能力其實比想像中還要強，只是缺乏了一些經驗跟想像力而已。</p>
  <p>沒想到第四期也就這樣慢慢步入尾聲了，再過一個月，課程就只剩下最後面的 React 了！那邊結束以後就差不多要開始準備求職，然後一期就這樣要結束了。目前對於下一期有一些規劃跟想法，沒意外的話會有第五期，但課程制度還有收費方式應該會變得不太一樣。</p>
  <p>這是一條永無止盡的路，我還在路上走著，而且一直都覺得沿途風景挺有趣的，暫時還沒打算要停下來。</p>
<img src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=c344302c8a2d" width="1" height="1" alt="" />
</div>]]></content><author><name>Huli</name></author><category term="Huli" /><category term="Huli" /><summary type="html"><![CDATA[程式導師實驗計畫第四期課程做了哪些改動？ ——]]></summary></entry><entry><title type="html">前端引路人計畫失敗心得</title><link href="https://nodebe4.github.io/oped2/2020-10-02/%E5%89%8D%E7%AB%AF%E5%BC%95%E8%B7%AF%E4%BA%BA%E8%A8%88%E7%95%AB%E5%A4%B1%E6%95%97%E5%BF%83%E5%BE%97/" rel="alternate" type="text/html" title="前端引路人計畫失敗心得" /><published>2020-10-02T05:24:13-05:00</published><updated>2020-10-02T05:24:13-05:00</updated><id>https://nodebe4.github.io/oped2/2020-10-02/%E5%89%8D%E7%AB%AF%E5%BC%95%E8%B7%AF%E4%BA%BA%E8%A8%88%E7%95%AB%E5%A4%B1%E6%95%97%E5%BF%83%E5%BE%97</id><content type="html" xml:base="https://nodebe4.github.io/oped2/2020-10-02/%E5%89%8D%E7%AB%AF%E5%BC%95%E8%B7%AF%E4%BA%BA%E8%A8%88%E7%95%AB%E5%A4%B1%E6%95%97%E5%BF%83%E5%BE%97/"><![CDATA[<!--1601634253000-->
<p><a href="https://medium.com/@hulitw/failed-mentorship-program-70a3c50caf7f?source=rss-f1fb3e40dc37------2">前端引路人計畫失敗心得</a>
——</p>

<div>
  <p>一年前，我在 Medium 上面發布了這篇文章：</p>
  <p><a href="https://medium.com/@hulitw/mentorship-program-350db93d5c9c">真正的 Mentorship program：前端引路人計畫</a></p>
  <p>內容主要是我想當 mentor 所以在找 mentee，可以指導的範圍大概是：</p>
  <ol>
    <li>特定主題研究及技術文章撰寫</li>
    <li>技術相關小遊戲製作</li>
    <li>做 side project 並且開源</li>
    <li>其他技術問題</li>
    <li>職涯相關問題</li>
  </ol>
  <p>過了一年，該是時候跟大家報告結果了（雖然標題已經有了就是了）。在報告結果之前，我們先跟著時間回顧一下這個計畫吧。</p>
  <h3 id="section">計畫初期（2019 年 8 月）</h3>
  <p>這個計畫大約 46 個人報名，一共有 22 位錄取。</p>
  <p>計畫開始的時候我先把大家拉到了 slack 群組裡面，並且寫了一份計畫的說明：<a href="https://github.com/aszx87410/mentorship-program">https://github.com/aszx87410/mentorship-program</a></p>
  <p>之後花了大概兩週的時間跟大多數人語音通話過，主要就是溝通一下對這個計畫的期待，以及確認我可以幫忙的地方，也花了些時間跟每一個人確認之後想要做的主題，有些人會想做一個小專案，有些人則是寫文章之類的。</p>
  <p>接著有關於這個計畫進行的方式，當初的流程是這樣：</p>
  <ol>
    <li>根據自己訂的進度做出東西</li>
    <li>碰到問題找我討論，把問題寫成文字丟給我（沒問題可跳過此步驟）</li>
    <li>我會找時間回覆你，為了避免多次 round-trip，請把問題寫清楚</li>
    <li>寫進度報告 po issue，說明討論內容以及當前進度跟下週進度</li>
    <li>回到第 1 步</li>
  </ol>
  <p>基本上每週都會要求要有一些進度，然後簡單寫一下自己的進度，有問題就可以跑來問我找我討論，沒問題的話就繼續跟著自己進度走就好。</p>
  <p>就這樣子試跑了一個月以後，我發現成效不彰，效果還滿差的。</p>
  <p>我自己猜測的原因有幾個，第一個是想像跟現實是兩回事。很多人在報名之前，可能只有想到好的那一面，想說自己可以成長多少，但是卻忘記了要付出的時間與精力。</p>
  <p>因為每一個學生都是有正職工作的，所以可以利用的時間基本上就是下班後還有假日。有些人其實之前並沒有利用這些時間進修過，所以真的體驗過才知道那是多困難的一件事，並沒有想像中的簡單。</p>
  <p>再來，我在開這計畫之前，我以為大家缺的是一個導師，是一個能讓人發問以及討論問題的人。但我後來發現對其中一部分的人來說並不是如此，他們缺的是一個可以督促他們的人。</p>
  <p>在兩者有什麼不同？如果你要找一個跟你討論問題的人，你必須先準備好問題，必須先碰到過問題；要碰到問題，就必須自己動手去做過。但如果什麼東西都還沒開始做，是沒有問題可以問的。</p>
  <p>而有些人就是處在這個狀態，因為還沒開始，所以沒問題可以問，也不知道該討論什麼。因此後來我有改變了一下做法，試著當那個督促的人，看能不能幫大家多少增加一些動力。</p>
  <h3 id="section-1">計畫中期</h3>
  <p>之後有八成左右的互動，都是這樣發展的：</p>
  <ol>
    <li>學生提了要做某個東西，我看過之後說 ok 沒問題，進度自己抓一下就好</li>
    <li>一週過後，在實作上碰到問題就會來找我討論，如果沒有的話就是自己 po 說做了些什麼，然後我會看一下</li>
    <li>一週又過去了，繼續來找我討論進度跟問問題</li>
    <li>然後某一週，就不見了</li>
  </ol>
  <p>大概從這個時候開始，整個計畫就差不多可以宣告失敗了。</p>
  <p>雖然說是為期一年的計畫，但大概過了兩三個月之後，參與的人就只剩 4, 5 個了。一年過後，只剩下 2 個完整跟完的。</p>
  <h3 id="section-2">計畫後期</h3>
  <p>跟中期其實差不多，還是維持一樣的模式，就是你要先準備好東西來找我討論，否則我也不會主動去找你。</p>
  <p>跟中期的差別就是人數愈來愈少。</p>
  <figure>
<img alt="" src="https://cdn-images-1.medium.com/max/1024/1*EMUGvwLAqEV0ZyVQXDMvLg.png" />    <figcaption>
圖片來源：<a href="https://www.maxlist.xyz/2020/09/21/huli-mentor/">https://www.maxlist.xyz/2020/09/21/huli-mentor/</a>
    </figcaption>
  </figure>
  <h3 id="section-3">失敗原因</h3>
  <p>我自己覺得這個計畫最失敗的點，就是我自己可能也還沒想得很清楚我要做什麼。當初的想法就只是，好像自己可以提供一些資源來做些什麼，能夠解惑一些疑難雜症之類的。</p>
  <p>但實際跑過之後才知道，並不是每個人都有這麼多問題需要被幫忙。對很多人來說，問題都只是非常短暫的。例如說剛好要換工作所以有問題，或者是工作上剛好這邊有問題，但除了這幾個時間點以外，其他時候都是沒有什麼問題的。</p>
  <p>因此，如果只是想提供這種顧問諮詢服務，之前的請我吃飯企劃其實效益還比較大，一頓飯就可以解決了。</p>
  <p>再來還有個問題我覺得跟我的個性有關，因為通常在看學生的一些專案進度時，我最常說的就是：「這個不錯」或是「這個 ok，沒什麼問題」，因為我就真的覺得沒什麼問題。</p>
  <p>我就會覺得你現在這樣寫也不錯，換個寫法也 ok，換個切入點也可以。只要在技術上的描述沒有什麼明顯的錯誤，你的寫作風格要怎麼寫我不會干涉。可以是那種百科全書式的筆記文章，也可以是充滿一堆 meme 跟電影台詞的幽默文章，也可以是被技術文章耽誤的輕小說家，把技術文當小說來寫。</p>
  <p>因為我真的覺得都可以。</p>
  <p>但或許也是因為這樣，可能有些人覺得並沒有得到什麼特別的收穫。</p>
  <p>最後，這個計畫最失敗的點，就是兩敗俱傷。因為我覺得我沒做到什麼，然後一開始來參加的那些學生也覺得自己沒做到事情，然後可能還會對淡出這個計畫感到有點抱歉。</p>
  <p>所以沒有人從中獲益，他們沒有，我也沒有。</p>
  <p>不過有跟完的兩個學生應該是有得到一些東西的，底下是他們的心得：</p>
  <h4 id="section-4">學生心得 #1</h4>
  <p>好快，『前端引路人計畫』已經快一年了，一年前我希望多學習前端的技能，剛好 Huli 有這樣的計畫，在報名的當下，我明瞭 Huli 的教法是適合我的，大大的教學理念我也認同，所以沒有太多的猶豫就報名了這個計畫。</p>
  <p><strong>計畫進行的方式：</strong><br />1. 每週報告進度<br />每週報告的方式我覺得蠻好的，因為平日要上班，每週報告壓力不會太大，也不會太放鬆，淺意識我會記得我在參加一個計畫</p>
  <p>2. 自己定目標<br />自己定目標，也是一個學習，每個禮拜日確認自己訂的每週目標是否有達成，如果沒有，下次要怎麼避免（我通常就是把每週的進度減少），找出一個自己可以執行的學習計畫。</p>
  <p>3. 有問題就直接留言問大大<br />Huli 大大一如往常給了許多好的學習建議，非常謝謝</p>
  <p><strong>建議：</strong><br />如果真的有什麼建議，或許是可以固定一段時間，例如兩個月或三個月，有一個比較正式，直接的交換意見，但其實我也不是很確定，因為文字訊息一樣可以達到溝通的目的，所以不是太確定這樣的行為，可以帶來什麼效益</p>
  <p><strong>心得收穫：</strong><br />因為把計畫的百分之七十時間，用來追程式導師線上課程，這堂課本來就有很好的課程安排，所以大部分的主題，並不需要自己花時間找資料，這或許也幫忙了我把心思放在安排課程進度與學習上。最近又開始通車看大大的文章，再次看到大大提到的，如果你想某個技能變厲害，就必須付出時間去練習。參與這個計畫，真的必須付出相當多的時間，有時 delay 我會工作請假把課程補起來，總的來說，我是覺得時間很不夠，假日我都待在家追進度。如果說參與這個計畫最大的收穫是什麼？那應該是認識學習的方法與持續學習的習慣。也再次謝謝大大無私地開了這個計畫。</p>
  <h4 id="section-5">學生心得 #2</h4>
  <p>請參考：</p>
  <p><a href="https://www.maxlist.xyz/2020/09/21/huli-mentor/">Huli 引路人計畫 52 週過後 &amp; 這一年學習分享</a></p>
  <h3 id="section-6">結語</h3>
  <p>經過這次之後，我覺得我暫時不適合這種模式，所以引路人也不會有第二期。我比較適合的可能還是一直有在持續做的教學模式，我來教，你來學，而不是像我原本預期的 mentor 制可以互相討論問題之類的。</p>
  <p>所以之後比較有可能走的方向是規劃一些給已經有工作經驗的工程師來上的課，藉由這些課程來提升技術，讓技術能力能有所成長。除了技術能力以外，有什麼其他問題也可以順便問我，以技術為主，其他疑難雜症為輔，或許這是目前比較適合我的。</p>
  <p>最後，感謝曾經有報名以及有錄取的前端引路人計劃的學生們。</p>
<img src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=70a3c50caf7f" width="1" height="1" alt="" />
</div>]]></content><author><name>Huli</name></author><category term="Huli" /><category term="Huli" /><summary type="html"><![CDATA[前端引路人計畫失敗心得 ——]]></summary></entry><entry><title type="html">讀了之後心有戚戚焉的《下班後1小時的極速學習攻略》</title><link href="https://nodebe4.github.io/oped2/2020-09-07/%E8%AE%80%E4%BA%86%E4%B9%8B%E5%BE%8C%E5%BF%83%E6%9C%89%E6%88%9A%E6%88%9A%E7%84%89%E7%9A%84-%E4%B8%8B%E7%8F%AD%E5%BE%8C1%E5%B0%8F%E6%99%82%E7%9A%84%E6%A5%B5%E9%80%9F%E5%AD%B8%E7%BF%92%E6%94%BB%E7%95%A5/" rel="alternate" type="text/html" title="讀了之後心有戚戚焉的《下班後1小時的極速學習攻略》" /><published>2020-09-07T08:42:05-05:00</published><updated>2020-09-07T08:42:05-05:00</updated><id>https://nodebe4.github.io/oped2/2020-09-07/%E8%AE%80%E4%BA%86%E4%B9%8B%E5%BE%8C%E5%BF%83%E6%9C%89%E6%88%9A%E6%88%9A%E7%84%89%E7%9A%84%E3%80%8A%E4%B8%8B%E7%8F%AD%E5%BE%8C1%E5%B0%8F%E6%99%82%E7%9A%84%E6%A5%B5%E9%80%9F%E5%AD%B8%E7%BF%92%E6%94%BB%E7%95%A5%E3%80%8B</id><content type="html" xml:base="https://nodebe4.github.io/oped2/2020-09-07/%E8%AE%80%E4%BA%86%E4%B9%8B%E5%BE%8C%E5%BF%83%E6%9C%89%E6%88%9A%E6%88%9A%E7%84%89%E7%9A%84-%E4%B8%8B%E7%8F%AD%E5%BE%8C1%E5%B0%8F%E6%99%82%E7%9A%84%E6%A5%B5%E9%80%9F%E5%AD%B8%E7%BF%92%E6%94%BB%E7%95%A5/"><![CDATA[<!--1599486125000-->
<p><a href="https://medium.com/@hulitw/learning-how-to-learn-7c92be9b72fa?source=rss-f1fb3e40dc37------2">讀了之後心有戚戚焉的《下班後1小時的極速學習攻略》</a>
——</p>

<div>
  <figure>
<img alt="" src="https://cdn-images-1.medium.com/max/1024/0*BYGK9YikTFeS6YM7" />    <figcaption>
Photo by <a href="https://unsplash.com/@aaronburden?utm_source=medium&amp;utm_medium=referral">Aaron Burden</a> on <a href="https://unsplash.com?utm_source=medium&amp;utm_medium=referral">Unsplash</a>，我只是希望秋天趕快來所以選了這張
    </figcaption>
  </figure>
  <p>前一陣子收到采實文化的來信，邀請我閱讀並分享一本新書：《<a href="https://www.books.com.tw/products/0010865071">下班後1小時的極速學習攻略</a>》，雖然說很久沒有看書了，但第一次收到出版社的邀請滿開心的，就直接答應了下來。</p>
  <p>上個週末花了點時間把這本書給看完，覺得讀這本書的時機真是對極了。這是一本在講學習的書，雖然說書名跟作者的背景都會讓人以為這本書是只給上班族看的，但其實裡面提到的東西，就算不是上班族也很受用。</p>
  <p>而我會說時機很對，是因為我一直有在帶一個線上的課程：<a href="https://bootcamp.lidemy.com/">程式導師實驗計畫</a>，從計劃當中可以觀察學生學習的狀況，也可以看到他們所寫的心得，這是第四期的計畫了，從前幾期的累積中，對於「學習」這件事也是有些自己的看法。</p>
  <p>底下我將會分享一些看完書以後的心得，也會從書中節錄一些我很有感觸的段落。</p>
  <h3 id="section">學習的訣竅就是：先別急著學習</h3>
  <p>無論是學習，或者是做其他事情也好，有許多人都忽略了「事前準備」的重要性。什麼都還沒準備，就直接捲起袖子下去做事了。</p>
  <p>以前在學校上課時，老師總是會強調預習的重要，因為有預習過的話，就能大概知道課堂上會教些什麼東西，也能夠更清楚整張學習地圖長什麼樣子，知道自己在上面的哪一個位置。</p>
  <p>在做運動之前也都會先暖身，把筋拉開，把身子暖起來之後才開始做運動，讓身體有足夠的伸展，在運動時才比較不容易受傷。</p>
  <p>寫程式也是一樣的，當接到一個新功能的需求時，絕對不是直接開啟帥氣的編輯器開始寫 code。事實正好相反，寫 code 是最後一件事。在寫 code 之前，我一定會把相關的規格文件看過一遍，知道這個功能的範圍多大，會影響到什麼。</p>
  <p>在看規格的時候，腦中也同時規劃起了程式碼，例如說這邊要新增一個頁面，這邊要用 function 包起來，這邊要注意畫面的狀態等等。事先思考過的好處，就是真的動手做事時不會迷失，不會不知道自己現在在哪裡。</p>
  <p>之前在教學時，我就有一個章節的標題是：<a href="https://github.com/Lidemy/ALG101-too-weak-to-leetcode/tree/master/unit1">要學好程式，從不要寫程式開始</a>，比起先寫 code，還有更多事情是更該做，也更值得做的。</p>
  <p>而這本書也是同樣的，它並不是直接就教你一些學習的方法，而是先從計畫開始。你為什麼想學習？有準備好什麼樣的計畫？學習的目標訂在哪裡？這些都是在開始前應該先想過的。當然，這並不是說沒有想過就不能開始，但若是你有先想過這些問題，學習起來會更容易。</p>
  <p>而在學習之前最重要的，就是要清楚自己的目標：</p>
  <blockquote>
<em>沒有哪一種努力是沒有目標的。做任何一件事必然都有其原因，而目標中「有多少自己的想法」，決定了你努力的程度。這個乘載著個人動機的目標，將督促你繼續向前邁進。</em>  </blockquote>
  <blockquote>
<em>假設你正規劃這次暑假出國旅行，為了避免休假行程出問題，你會盡最大努力及時完成手邊工作；雖然專心投入工作耗費心神，但是越靠近休假（目標），你的心情越好。</em>  </blockquote>
  <blockquote>
<em>反之，假設你工作的目標只是為了達到公司年度營業額，情況又是如何？也許在工作態度上就有所不同，不像為了自己的旅遊而工作那樣積極。即使是處理相同的工作，目標是否由自己設定，將會影響工作的態度。</em>  </blockquote>
  <blockquote>
<em>—— 節錄並改寫自下班後 1 小時的極速學習 p.29</em>  </blockquote>
  <p>為了自己學習顯然是目標性最強的。書中給出的例子也滿合理，確實是這樣。在休假之前都會確保自己的東西不出問題，不然休假時就沒有辦法安心。</p>
  <p>不過很多人可能沒有辦法有這麼強的目標性，對他來說學程式就只是一件「可以試試看」的事情。但儘管如此，還是可以幫自己設定一個目標，例如說「我要學到可以寫出個人網站」或是「我要學到可以出去找工作」之類的。</p>
  <p>以我的課程來說，幫大家設定的目標就是：「找到工程師的工作」。</p>
  <h3 id="section-1">學習的時間以及空間管理</h3>
  <p>在學習上許多人會有一個迷思，認為「全職學習就一定時間比較多」，這句話半對半錯。正解是：「可以學習的時間確實變多了，但真正拿來學習的時間則不一定」。</p>
  <p>我自己在<a href="https://medium.com/@hulitw/i-failed-9386c6b0a681">閉關修煉</a>的時期或甚至更早以前，就有這樣的感觸了。時間多是一回事，有多少時間可以有效利用又是另外一回事。一天上班八個小時，回家學習一個小時，跟一天看 YouTube 三小時、玩遊戲三小時、學習一小時，兩者在學習的時間上是一樣的。</p>
  <p>學習的時間應該根據自己的狀況去調整，而不是一直訂著根本沒完成過的計畫，然後相信自己一定做得到。「Hope is not a strategy」，懷抱著希望且相信自己做得到，這並不是一種計畫。</p>
  <p>對那些職場人（作者在書中所使用的名詞，用來指稱那些目前有著正職工作的人）來說也是一樣的：</p>
  <blockquote>
<em>職場人學習的時間明顯不足。可以不放棄某種程度的社交活動和休閒活動，又能兼顧學習，這種事在現實生活中不可能存在。在學習期間，必須放棄順序排在較後面的活動。舉例來說，如果想要守住學習的時間，對職場同事或親友的婚喪喜慶就必須設定出席的限度。</em>  </blockquote>
  <blockquote>
<em>比較令人意外的是，職場人在學習期間，經常沒有依照先後順序行動的習慣。如果有誰覺得不必有所犧牲，「只要利用時間學習就行了」，這種想法無疑是邁向失敗的捷徑，甚至可能讓你的社交生活和學習雙雙落空。</em>  </blockquote>
  <blockquote>
<em>— — 節錄並改寫自下班後 1 小時的極速學習 p.49</em>  </blockquote>
  <p>要利用下班時間學習的話，勢必要做出取捨，什麼都想要的話，就只會什麼都得不到。</p>
  <p>作者在書中也有給出自己設計的週末計畫，兼顧了學習跟休息，大概是：</p>
  <ul>
    <li>08:00 起床</li>
    <li>09:00~12:00 學習</li>
    <li>12:00~19:00 休息（約朋友吃飯、運動、購物等等）</li>
    <li>19:00~22:00 學習</li>
    <li>23:00 就寢</li>
  </ul>
  <p>雖然整個下午都是放鬆休息的狀態，但其實一天也學習了 6 個小時！若是下午有空檔的話，也許可以再多出一至兩個小時。</p>
  <p>書中也有提到比起投入大量的時間學習，職場人更需要的是在有限時間內提高效率的練習，懂得有效利用時間才是學習的關鍵。我自己認為不只是職場人，其實全職學習的人也可以參考類似的方法，把平日也規劃成上面那樣的時程表，然後中午休息那一段可以再切割一下，擠出兩個小時，這樣一天就有八個小時的學習時間了。</p>
  <p>除了時間管理以外，「空間管理」也是很重要的。<a href="https://www.ptt.cc/man/joke/DE63/DC5E/DC7C/M.1176566917.A.826.html">床是會高速移動的物體</a>，根據相對論，床具有極大的吸力，更何況家裡除了床還有電視跟其他誘惑。能在家裡認真學習的人，小弟我是真心佩服。</p>
  <p>作者在書中也有對幾個不同的學習場地做出評論，例如說咖啡廳比較適合早上去，因為下午可能會變得有些吵雜，然後每天一杯咖啡的話其實也不便宜。圖書館的話很安靜而且不需要花錢，但有可能需要早一點去佔位子。</p>
  <p>至於在家學習，作者有訂出幾個需要遵守的規範：</p>
  <blockquote>
<em>1. 區隔學習的空間跟休息的空間<br />2. 在家盡可能不長時間學習<br />3. 為轉換心情及體能管理，一天至少短暫外出一次<br />4. 在排定好的時間外，絕對不開電腦或電視</em>  </blockquote>
  <blockquote>
<em>— — 節錄並改寫自下班後 1 小時的極速學習 p.94</em>  </blockquote>
  <p>我自己的話在家裡也是很難專心學習，之前有時候需要遠端工作，我一定會去一些 co-working space，而且因為不會被其他人所干擾，甚至會覺得效率比我在辦公室時還要高。</p>
  <p>所以除了時間以外，空間也是很重要的一項影響學習效率的因素。</p>
  <h3 id="section-2">學習的心態調整</h3>
  <p>我之前已經有寫過幾篇文章在談這件事了，像是<a href="https://medium.com/@hulitw/mindset-36c163303217">打造「正確」學習 mindset</a>以及<a href="https://medium.com/hulis-blog/before-learning-b9b933b6078e">學程式的第零課：心態調整</a>，在談的都是學習的心態。</p>
  <p>有些人在學習開始之前，就會產生抗拒的心態，或者是不知道該怎麼選擇學習的目標，深怕「選錯」。而作者在書中則給了一個十分正面的心態：</p>
  <blockquote>
<em>我想說的是，只要勇於嘗試就行的事情，不必花太多時間煩惱或看人臉色。不少人會這麼問：「我已經 OO 歲了，現在開始準備考試也沒問題嗎？」，有趣的是，不管是二十五歲、三十歲還是三十五歲，各年齡層的人都會問相同的問題。幼兒在挑戰拿當湯匙前，不會想著「我拿得起湯匙嗎？」「拿錯的話，會不會被媽媽笑？」的問題。如果心裡有那樣的顧慮，大概連湯匙也拿不好了。</em>  </blockquote>
  <blockquote>
<em>— — 節錄並改寫自下班後 1 小時的極速學習 p.230</em>  </blockquote>
  <blockquote>
<em>任何的選擇都無關失敗。如果你已經盡了最大的努力設定明確的目標，並且經過深思熟慮後，做出最適當的決定，那麼這個決定已經無關失敗。不是你的決定錯誤，只是你和目標無緣，不必再對此感到挫折。</em>  </blockquote>
  <blockquote>
<em>— — 節錄並改寫自下班後 1 小時的極速學習 p.36</em>  </blockquote>
  <p>在選擇學習的目標時，也必須從自身出發，去想一下自己到底想要學什麼，是為了自己而學，還是為了其他人而學？如果不是自己發自內心想學，動力或許就低一些。如果真的不知道學什麼但又想學習，選擇一個最多人在學的也是可以。</p>
  <p>除了學習開始之前會碰到這種心態上的問題，學習中也會碰到撞牆期，如果沒有跨過那道牆的話，就到此為止了。在觀察學生心得的時候，也常常會看到他們提出各種疑問，例如說：</p>
  <ul>
    <li>我現在學的真的是我喜歡的嗎？</li>
    <li>我真的想要寫程式嗎？</li>
    <li>我真的有在進步嗎？</li>
    <li>我真的想成為工程師嗎？</li>
    <li>我真的有學進去嗎？</li>
  </ul>
  <p>這一部分可能是課程設計上的問題，沒有讓學生察覺到自己的進步，就失去了一些成就感，導致自我懷疑；但另一方面，若是能改變自己的心態去面對這些問題，或許也是一種方法：</p>
  <blockquote>
<em>此外，學習的撞牆期也是必須克服的問題。無論學習什麼難免都會碰上實力提昇不上來的時期。這時一旦放棄，就將前功盡棄，與其如此，倒不如努力從頭到尾學習過一次。</em>  </blockquote>
  <blockquote>
<em>如果前面的方法都不管用呢？最後的方法是用「先做再說」的態度學習。「為什麼要學習？」「學習真的能讓情況好轉嗎？」「學習真令人厭煩。」這些想法暫且拋到腦後吧！先下定決心把無法理解的部分背起來，堅持學習到能順利答題的程度為止吧！這個學習未來會得到什麼樣的結果，就留待日後檢驗。</em>  </blockquote>
  <blockquote>
<em>雖然這種方法看起來很笨，不過我身邊取得不錯成就的人來看，也有不少人是用這種態度學習的。想法越單純，專注力越高。只要對學習產生一絲厭煩情緒，就會對學習造成阻礙。既然已經設定好目標，也下定決心要達到目標了，那麼默默堅持到最後才是最重要的。</em>  </blockquote>
  <blockquote>
<em>— — 節錄並改寫自下班後 1 小時的極速學習 p.128</em>  </blockquote>
  <p>分享一個小故事，我有時候會因為各種拖延症不想開始做事，就會去看 YouTube 廢片，看完之後滑 PTT，PTT 看完再去滑個臉書，然後一天就這樣過去了。在晚上睡覺前，就會覺得自己今天很廢，什麼事都沒做，都把時間浪費掉了。</p>
  <p>為什麼會拖延？可能是因為覺得做起事來很廢，但其實不斷拖延不做事，比做事本身還要累，因為那是一種精神上的疲憊。你會一直不斷責備自己，但事情依然沒有被做好。這樣的話，還不如找個時間開始做事，你甚至會發現做事情本身要花的精力比想像中的少，比拖延還要輕鬆。</p>
  <p>另一個作者有談到的是比較的心態，在我那個線上課程的計畫中，每個人都可以看到其他同學的進度跟作業，所以難免會產生比較心態，會覺得為什麼自己跟課跟得那麼慢，為什麼別人的作業都寫得那麼好。</p>
  <blockquote>
<em>有時候看起來學習不比自己認真的朋友通過了考試，自己卻不合格。這種時候難免會喪失學習的動力，以為自己「果然不是讀書的料」。一旦喪失鬥志，將導致學習效果不佳，並再次得不到理想的結果，淪為惡性循環。</em>  </blockquote>
  <blockquote>
<em>我們所看到的人，並不是他的全部。很多時候通過考試的朋友表面看起來比自己不認真，事實上卻不是如此。如果真有朋友完全不學習，卻運氣非常好地通過考試呢？就算如此，那也是他個人的問題，和我準備考試一點關係也沒有。因為那樣的朋友而消耗自己的情緒，對考試毫無幫助。</em>  </blockquote>
  <blockquote>
<em>— — 節錄並改寫自下班後 1 小時的極速學習 p.163</em>  </blockquote>
  <p>作者的態度十分務實，無論別人做了什麼，都跟你考試會不會通過，跟你學習的目標能不能達成無關，如果為了其他人而消耗自己的情緒，只會有負面影響，所以是不必要的。</p>
  <p>在書的後半段也提到他有訓練過「切割情緒」，把心房想成有幾個不同的小房間，住著不同的情緒，當某一種情緒太過強烈時，就想辦法把房門關起來，不要去想它。</p>
  <p>或是有一個小方法也很管用，就是出聲提醒自己應該做事了，例如說「阿！該背英文單字了」、「該去洗碗了」之類的，靠著做事情來分散注意力。</p>
  <p>有一段話我覺得寫得很好：</p>
  <blockquote>
<em>我過去在學習時，也經歷過低潮。職場人在學習時的每一刻，其實都是與深陷低潮的危機對抗的過程。當低潮的危機來臨時，請記住這個事實 — — 低潮既然是我造成的，我自然有能力克服；低潮隨時都可能出現，我也隨時可以戰勝它。</em>  </blockquote>
  <blockquote>
<em>— — 節錄並改寫自下班後 1 小時的極速學習 p.236</em>  </blockquote>
  <p>解鈴還須繫鈴人，自己把鈴鐺掛上去的，就自己拿下來吧。</p>
  <h3 id="section-3">學習方法</h3>
  <p>大家注意到了嗎？我前面寫了這麼多，卻還沒有提到學習的方法，這是因為前面那些事情如果都有做好，我覺得就已經先成功一半了。</p>
  <p>在談學習方法之前，我們先回來談一下學習心態。有些人學習之所以不順，是因為最大的敵人就是自己，卻又沒辦法下定決心剷除自己，改變自己的觀念：</p>
  <blockquote>
<em>每個職場人都有自己一套學習方法。但是在學習方面有過成功經驗的人，通常會堅持自己的學習方法。這可能是自尊心的問題，也可能是他們不願接受變化。</em>  </blockquote>
  <blockquote>
<em>但是隨著時間改變，考試制度或出題方式不斷推陳出新，最有效的學習方式也並非全然適用於所有的情況。過去成功過一次的方法，可能不適合現在。我們必須時時檢視自己目前的學習方法，努力追求最新、最好的學習方法。如果考試結果不理想，也要客觀分析原因，才能避免再次失敗。</em>  </blockquote>
  <blockquote>
<em>— — 節錄並改寫自下班後 1 小時的極速學習 p.236</em>  </blockquote>
  <p>以前有用不代表現在有用，有些人就是很鐵齒，不換方法就是不換。現在的方法就算不管用，也不換，或許是期待某一天它會有用，也或許就是莫名的堅持。</p>
  <p>這樣做的缺點在於，這是很消耗精力的一件事。當你的學習方法不管用，學習進度就會十分緩慢，看不太到自我的成長，一旦看不到成長，就會產生各種對自我以及對學習的懷疑，當這個懷疑大到一定程度的時候，就放棄了。</p>
  <p>學習最困難的就是堅持到底。因為在這路上會有一堆心態上的問題需要處理，任何一個都有可能讓你萌生退意。</p>
  <p>因此我對學習方法的看法跟作者一樣，必須時時檢視自己的學習方法是否適合自己以及現在正在學習的東西，若是試了一陣子沒有成效，就果斷放棄換一個，而不是堅持原本的。這也是我在<a href="https://medium.com/@hulitw/learning-c6656ef14cd4">用對你有效的學習方法，無論那是什麼</a>所談到的東西。</p>
  <p>再來真的要談到學習方法了，有一個方法我印象深刻，因為我也不斷跟學生說可以試試看：</p>
  <blockquote>
<em>放下想理解所有內容的執念</em>  </blockquote>
  <blockquote>
<em>學習時犯下的最大錯誤，在於一字不漏地閱讀書本，執著於一次理解書本的內容。我們都以為熟讀書本，就能理解書中內容，並且留下長久的記憶。因此每次遇到不懂的地方，總是反覆推敲思考，直到完全理解之後，才願意進入下一個段落。然而用這種方式學習，一天能夠學習的份量只會逐漸減少。過於仔細閱讀新接觸的書本，不但導致速度降低，還會把自己搞得越來越累。再說就算完整讀過一遍，也不可能百分之百理解，所以我們必須調整學習時的心態，只要求理解核心內容就好。</em>  </blockquote>
  <blockquote>
<em>我建議為每個段落設定時間限制，如果在預定時間內沒有讀完，就繼續往下一段。要是已經讀過兩次，腦中還是無法理解文字的意義，應該暫且跳過該段內容。一開始不必急著理解或背記太過瑣碎的內容。</em>  </blockquote>
  <blockquote>
<em>許多人因為急著想立刻明白所有內容，也因為如果沒有完全理解就闔上書本，內心會感到不安，所以反覆閱讀無法理解的句子。但是為了消除這個不安的情緒而反覆閱讀，只會使進度嚴重落後，喪失學習動力。我們並不是為了解決心中的不安才學習的。</em>  </blockquote>
  <blockquote>
<em>— — 節錄並改寫自下班後 1 小時的極速學習 p.99</em>  </blockquote>
  <p>最後一段話講得真好，「我們並不是為了解決心中的不安才學習的」，學習有先後順序，其中最重要的就是學習目標，我們是為了達成學習的目標而學習的。</p>
  <p>以我的課程為例，目標就是「轉職成工程師」，而不是「把所有東西學會」，有些學生常常會花很多額外的時間琢磨細節，這不是不好，只是悖離了原本的學習目標。很多東西之所以課程沒提到，就是因為我覺得那相對上來說不重要，只要把這週重要的內容學習完畢，就可以前往下一週了。</p>
  <p>但依然有些人沒有辦法跨過自己心中的坎，就是沒有辦法跟「不安」共存，一定要把自己心中的疑惑解決了才願意繼續下去。但問題是一樣的，進度落後容易喪失學習動力，很有可能你的不安還沒解決，你就先放棄學習了（但若是真的沒有辦法跟不安共存，也是不用特別勉強，找到適合自己的方法最重要）。</p>
  <blockquote>
<em>職場人準備考試，最好「隨便應付」。什麼？隨便應付？學習可以隨便應付嗎？這句話的意思，是指學習時不必理解所有考試內容。如果你下定決心要仔細理解考試內容，甚至讀完非常瑣碎的部分，那麼這個學習將難以堅持到終點。</em>  </blockquote>
  <blockquote>
<em>通過考試比考試成績重要。即使不是考試，在學習其他事物時，也只要做到勉強達成個人目標的程度就好。有不了解的部分，只要知道問題所在就可以跳過。當職場人的學習出現壓力的那一刻起，學習便註定失敗。</em>  </blockquote>
  <blockquote>
<em>— — 節錄並改寫自下班後 1 小時的極速學習 p.51</em>  </blockquote>
  <p>之前有人問過我，看了這麼多期學生，最後能成功找到工作的那些人，有什麼特質？之前我可能會回答「能把課程跟完」，但現在我會回答：「能接受自己只明白課程教的內容就好。能夠跟不安共存，並且容忍自己的作業只是『OK』，而不是『很好』」。</p>
  <h3 id="section-4">總結</h3>
  <p>其實在看這本書的時候，我最敬佩的是作者對於學習的心態。從我節錄的那些段落中就可以看得出來，作者對於學習是保持一種非常正向的態度，但那種正向不是「強迫樂觀」的那種，而是經由理性分析之後得到的結果。</p>
  <p>舉例來說，跟他人比較除了增進自己的情緒消耗以外毫無幫助，因此不需要跟他人比較；選擇既然都已經選了，就算真的選錯也無濟於事，因此選擇沒有對錯，只是跟選擇的目標無緣而已。</p>
  <p>這種心態其實是很多人沒有的，有很多人依然是深怕選錯，深怕失敗。</p>
  <p>另外，也可以從書中看出作者對於細節的用心程度。我一直都認為細節是專業跟非專業的關鍵，正是那些小細節產生了差異，讓一個人從前 1% 變成前 0.1%。</p>
  <p>作者在書中有一段談到時間管理，在前一晚會先把自己隔天要穿的衣服準備好，要帶的東西也全部準備好，隔天起床只要盥洗過後差不多就可以出門了，省了一半的時間。</p>
  <p>在通勤的時候也會分析各種狀況，例如說搭地鐵的時候可能適合看書，但公車不適合，因為公車太晃了；所以在搭公車時可以戴著耳機聽一些英文的資源，增進英文聽力，但走路的時候不適合，因為有可能聽不到周遭的環境音，會有一點危險；所以走路的時候可以想一下自己待會到公司要做些什麼，降低暖身的時間，一到公司就可以進入狀況開始辦公。</p>
  <p>這些細節，有些人連想都沒想過，但是對作者來說只是日常生活的一部分。</p>
  <p>我自己有時候也是會比較注意這種細節的人。例如說搭公車的時候，由於是常搭的路線，我知道哪些是熱門站，哪些是冷門站。如果要去的目的地剛好是冷門站，但是公車上人很多，我就會選擇在上一站的熱門站，跟著人潮一起下車，就不用在那邊一直「借過借過」。</p>
  <p>也會根據自己在哪一站下車決定坐哪裡。需要在冷門站下車的話，就不適合坐後面的位子，因為很有可能你還沒下車，門就關了，你大喊司機也不一定聽得到。所以住家最理想的地方是離熱門站大概三四站的冷門站，去程一定有位子，回程不用怕人多下不了車。</p>
  <p>我自己在看這本書的時候是邊讀邊點頭，「嗯，我也這樣想，講得真好」，就好像是有人把我的想法做了統整那樣子，然後就趕快把心中比較有感觸的段落節錄下來。</p>
  <p>總之呢，我覺得這本書對於一些茫然的學習者應該會有些幫助，至少在心態的建立、學習方法的選擇以及學習的前置作業上，能夠得到一些建議跟幫助。</p>
<img src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=7c92be9b72fa" width="1" height="1" alt="" />
</div>]]></content><author><name>Huli</name></author><category term="Huli" /><category term="Huli" /><summary type="html"><![CDATA[讀了之後心有戚戚焉的《下班後1小時的極速學習攻略》 ——]]></summary></entry><entry><title type="html">考資工所我覺得是一個最穩健的做法，一來是學校已經是個幫你搜集好一定程度資訊的地方，二來是那個學歷對很多公司來說還是滿重要的</title><link href="https://nodebe4.github.io/oped2/2020-08-13/%E8%80%83%E8%B3%87%E5%B7%A5%E6%89%80%E6%88%91%E8%A6%BA%E5%BE%97%E6%98%AF%E4%B8%80%E5%80%8B%E6%9C%80%E7%A9%A9%E5%81%A5%E7%9A%84%E5%81%9A%E6%B3%95-%E4%B8%80%E4%BE%86%E6%98%AF%E5%AD%B8%E6%A0%A1%E5%B7%B2%E7%B6%93%E6%98%AF%E5%80%8B%E5%B9%AB%E4%BD%A0%E6%90%9C%E9%9B%86%E5%A5%BD%E4%B8%80%E5%AE%9A%E7%A8%8B%E5%BA%A6%E8%B3%87%E8%A8%8A%E7%9A%84%E5%9C%B0%E6%96%B9-%E4%BA%8C%E4%BE%86%E6%98%AF%E9%82%A3%E5%80%8B%E5%AD%B8%E6%AD%B7%E5%B0%8D%E5%BE%88/" rel="alternate" type="text/html" title="考資工所我覺得是一個最穩健的做法，一來是學校已經是個幫你搜集好一定程度資訊的地方，二來是那個學歷對很多公司來說還是滿重要的" /><published>2020-08-13T08:01:05-05:00</published><updated>2020-08-13T08:01:05-05:00</updated><id>https://nodebe4.github.io/oped2/2020-08-13/%E8%80%83%E8%B3%87%E5%B7%A5%E6%89%80%E6%88%91%E8%A6%BA%E5%BE%97%E6%98%AF%E4%B8%80%E5%80%8B%E6%9C%80%E7%A9%A9%E5%81%A5%E7%9A%84%E5%81%9A%E6%B3%95,%E4%B8%80%E4%BE%86%E6%98%AF%E5%AD%B8%E6%A0%A1%E5%B7%B2%E7%B6%93%E6%98%AF%E5%80%8B%E5%B9%AB%E4%BD%A0%E6%90%9C%E9%9B%86%E5%A5%BD%E4%B8%80%E5%AE%9A%E7%A8%8B%E5%BA%A6%E8%B3%87%E8%A8%8A%E7%9A%84%E5%9C%B0%E6%96%B9,%E4%BA%8C%E4%BE%86%E6%98%AF%E9%82%A3%E5%80%8B%E5%AD%B8%E6%AD%B7%E5%B0%8D%E5%BE%88</id><content type="html" xml:base="https://nodebe4.github.io/oped2/2020-08-13/%E8%80%83%E8%B3%87%E5%B7%A5%E6%89%80%E6%88%91%E8%A6%BA%E5%BE%97%E6%98%AF%E4%B8%80%E5%80%8B%E6%9C%80%E7%A9%A9%E5%81%A5%E7%9A%84%E5%81%9A%E6%B3%95-%E4%B8%80%E4%BE%86%E6%98%AF%E5%AD%B8%E6%A0%A1%E5%B7%B2%E7%B6%93%E6%98%AF%E5%80%8B%E5%B9%AB%E4%BD%A0%E6%90%9C%E9%9B%86%E5%A5%BD%E4%B8%80%E5%AE%9A%E7%A8%8B%E5%BA%A6%E8%B3%87%E8%A8%8A%E7%9A%84%E5%9C%B0%E6%96%B9-%E4%BA%8C%E4%BE%86%E6%98%AF%E9%82%A3%E5%80%8B%E5%AD%B8%E6%AD%B7%E5%B0%8D%E5%BE%88/"><![CDATA[<!--1597323665000-->
<p><a href="https://medium.com/@hulitw/%E8%80%83%E8%B3%87%E5%B7%A5%E6%89%80%E6%88%91%E8%A6%BA%E5%BE%97%E6%98%AF%E4%B8%80%E5%80%8B%E6%9C%80%E7%A9%A9%E5%81%A5%E7%9A%84%E5%81%9A%E6%B3%95-%E4%B8%80%E4%BE%86%E6%98%AF%E5%AD%B8%E6%A0%A1%E5%B7%B2%E7%B6%93%E6%98%AF%E5%80%8B%E5%B9%AB%E4%BD%A0%E6%90%9C%E9%9B%86%E5%A5%BD%E4%B8%80%E5%AE%9A%E7%A8%8B%E5%BA%A6%E8%B3%87%E8%A8%8A%E7%9A%84%E5%9C%B0%E6%96%B9-%E4%BA%8C%E4%BE%86%E6%98%AF%E9%82%A3%E5%80%8B%E5%AD%B8%E6%AD%B7%E5%B0%8D%E5%BE%88%E5%A4%9A%E5%85%AC%E5%8F%B8%E4%BE%86%E8%AA%AA%E9%82%84%E6%98%AF%E6%BB%BF%E9%87%8D%E8%A6%81%E7%9A%84-5d7e4db954b?source=rss-f1fb3e40dc37------2">考資工所我覺得是一個最穩健的做法，一來是學校已經是個幫你搜集好一定程度資訊的地方，二來是那個學歷對很多公司來說還是滿重要的</a>
——</p>

<div>
  <p>考資工所我覺得是一個最穩健的做法，一來是學校已經是個幫你搜集好一定程度資訊的地方，二來是那個學歷對很多公司來說還是滿重要的</p>
<img src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=5d7e4db954b" width="1" height="1" alt="" />
</div>]]></content><author><name>Huli</name></author><category term="Huli" /><category term="Huli" /><summary type="html"><![CDATA[考資工所我覺得是一個最穩健的做法，一來是學校已經是個幫你搜集好一定程度資訊的地方，二來是那個學歷對很多公司來說還是滿重要的 ——]]></summary></entry><entry><title type="html">hello，目前還沒有喔</title><link href="https://nodebe4.github.io/oped2/2020-07-29/hello-%E7%9B%AE%E5%89%8D%E9%82%84%E6%B2%92%E6%9C%89%E5%96%94/" rel="alternate" type="text/html" title="hello，目前還沒有喔" /><published>2020-07-29T10:22:55-05:00</published><updated>2020-07-29T10:22:55-05:00</updated><id>https://nodebe4.github.io/oped2/2020-07-29/hello,%E7%9B%AE%E5%89%8D%E9%82%84%E6%B2%92%E6%9C%89%E5%96%94</id><content type="html" xml:base="https://nodebe4.github.io/oped2/2020-07-29/hello-%E7%9B%AE%E5%89%8D%E9%82%84%E6%B2%92%E6%9C%89%E5%96%94/"><![CDATA[<!--1596036175000-->
<p><a href="https://medium.com/@hulitw/hello-%E7%9B%AE%E5%89%8D%E9%82%84%E6%B2%92%E6%9C%89%E5%96%94-c13a4a5d594?source=rss-f1fb3e40dc37------2">hello，目前還沒有喔</a>
——</p>

<div>
  <p>hello，目前還沒有喔</p>
  <p>有想要做的計畫，但不確定什麼時候會有</p>
<img src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=c13a4a5d594" width="1" height="1" alt="" />
</div>]]></content><author><name>Huli</name></author><category term="Huli" /><category term="Huli" /><summary type="html"><![CDATA[hello，目前還沒有喔 ——]]></summary></entry><entry><title type="html">那些可以問得更好的程式問題</title><link href="https://nodebe4.github.io/oped2/2020-07-22/%E9%82%A3%E4%BA%9B%E5%8F%AF%E4%BB%A5%E5%95%8F%E5%BE%97%E6%9B%B4%E5%A5%BD%E7%9A%84%E7%A8%8B%E5%BC%8F%E5%95%8F%E9%A1%8C/" rel="alternate" type="text/html" title="那些可以問得更好的程式問題" /><published>2020-07-22T08:22:07-05:00</published><updated>2020-07-22T08:22:07-05:00</updated><id>https://nodebe4.github.io/oped2/2020-07-22/%E9%82%A3%E4%BA%9B%E5%8F%AF%E4%BB%A5%E5%95%8F%E5%BE%97%E6%9B%B4%E5%A5%BD%E7%9A%84%E7%A8%8B%E5%BC%8F%E5%95%8F%E9%A1%8C</id><content type="html" xml:base="https://nodebe4.github.io/oped2/2020-07-22/%E9%82%A3%E4%BA%9B%E5%8F%AF%E4%BB%A5%E5%95%8F%E5%BE%97%E6%9B%B4%E5%A5%BD%E7%9A%84%E7%A8%8B%E5%BC%8F%E5%95%8F%E9%A1%8C/"><![CDATA[<!--1595424127000-->
<p><a href="https://medium.com/@hulitw/ask-better-questions-19f01b02f436?source=rss-f1fb3e40dc37------2">那些可以問得更好的程式問題</a>
——</p>

<div>
  <figure>
<img alt="" src="https://cdn-images-1.medium.com/max/1024/0*Xwa6iaZsl2yUyzjw" />    <figcaption>
Photo by <a href="https://unsplash.com/@ph_an_tom?utm_source=medium&amp;utm_medium=referral">Duangphorn Wiriya</a> on <a href="https://unsplash.com?utm_source=medium&amp;utm_medium=referral">Unsplash</a>
    </figcaption>
  </figure>
  <p>提問很難，尤其是對初學者來說。</p>
  <p>所以我在教學的時候一直在想，除了<a href="https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way">提問的智慧</a>以外，有沒有什麼文章是可以讓學生看了之後，能夠更快速、更深刻地去體會為什麼他們問的問題不夠好？</p>
  <p>舉例應該是最快的，而且不能是假想的例子，因為身為一個已經比較會提問的人，我想出來的例子跟真實的例子應該會差很遠。因此，我特別從學生那邊搜集了一些問題，這樣就可以直接來看這些被真實提出的問題，再來分析它們哪邊不夠好，哪邊可以再改進。</p>
  <p>文章的問題皆為真實的提問，而我有把能夠識別出提問者身份的資訊去除，事前也有徵得本人同意。在看這些問題之前，我先講一下我整理出來的提問心法：一大原則，三大要素。</p>
  <h3 id="section">問問題一大原則</h3>
  <p>這個原則就是：</p>
  <blockquote>
角色互換  </blockquote>
  <p>或是你要想成「設身處地」、「將心比心」之類的也可以。</p>
  <p>當你把問題寫好要提出來的時候，你要想的第一件事情應該是：「如果我今天被其他人問一樣問題，我有<strong>足夠的資訊</strong>去 debug 嗎？」</p>
  <p>很多人會以為問題的好壞取決於難易度，例如說這個問題只是少打一個字，所以是個壞問題；這問題很難 debug，所以是個好問題。不是的，問題的難易度取決於個人，儘管只是打錯字，但你就是卡了一個小時還解不出來，那就代表對你來說，這是一個困難的問題。</p>
  <p>提問的好壞取決於資訊量，太少資訊量就是需要通靈人出場的時候，太多資訊量反倒變成一種雜訊，甚至是干擾。以初學者來說，<strong>寧可多給資訊，也不要少給。</strong></p>
  <p>很多時候你的提問之所以資訊量太少，是因為這些資訊量存在於你的腦海中，而不是你的提問裡面，通常有可能 3 成在提問裡，7 成在你腦海。所以對他人而言，他只看到了你理解的 3 成，或甚至是更少。</p>
  <p>在這種狀況下，其他人就只能靠經驗或者是通靈能力，才能理解你到底想問什麼。所以你必須要把你腦海中儲存的那些 context 一起放到問題裡面，其他人才知道這個問題完整的樣子到底是什麼。</p>
  <p>這也是為什麼角色互換很重要，你要像開無痕視窗那樣，把你對這個問題的背景知識都拿掉，然後只看那個問題本身，去想一下如果有人這樣來問你，你有沒有辦法拿到你需要的資訊？如果沒有，通常就代表資訊量不足；如果有，但是你發現「你需要的資訊」其實存在你腦中，而不是你的提問，就代表你應該把這項資訊放到問題裡面。</p>
  <p>不過這對初學者來說其實也不容易，因為有時候很難知道到底哪些是背景知識，哪些又是一定要放進問題裡的。</p>
  <p>因此，我整理了底下的三大元素，可以先跟著做就是了。</p>
  <h3 id="section-1">問問題三大要素</h3>
  <ol>
    <li>問題描述</li>
    <li>程式碼</li>
    <li>截圖與文字</li>
  </ol>
  <p>第一點就是這問題想提問的點到底是什麼？你碰到的狀況到底是什麼？預期的狀況是什麼？</p>
  <p>第二點就是程式碼，如果它是一個程式相關的問題，請把程式碼附上。</p>
  <p>第三點就是附上截圖，把出現錯誤的畫面或是覺得有問題的地方截圖附上來。另外，程式碼也可以一起截圖，但這不代表就不需要「文字的程式碼了」，兩個都有的話其實會更好。</p>
  <p>為什麼呢？因為要回答你問題的人，看到你問題時手邊不一定立刻就有電腦，所以沒辦法把你的程式碼跑起來確認結果。這時候如果有截圖，看程式碼就比較容易，也更有機會早一點幫你把 bug 找出來。</p>
  <p>再者，這個要素是「截圖與文字」，意思是光有截圖是不夠的，你要把截圖中的重要訊息再用文字打一遍。為什麼？因為我可能會需要幫你把錯誤訊息拿去 Google，才知道這是什麼意思。如果你只有附截圖，那我就要自己再看著截圖打一遍——但通常沒有人會這麼勤勞。</p>
  <p>截圖只是為了方便手邊沒有電腦的人解題，以及比較能確認整體的狀況為何，但裡面的重要資訊還是要再以文字來表示，才能完整表達問題。</p>
  <p>知道以上三大要素以後，我們來看看各種真實世界的提問範例。</p>
  <h3 id="section-2">範例一</h3>
  <blockquote>
我想請問一下<br />你寫oddnumbersum 和 evennumbersum 的時候，都有先set sum ＝ 0，再一個一個加上去。<br />最後return sum但做完oddnumbersum 後，sum不是應該是32嗎？  </blockquote>
  <blockquote>
那為什麼在做 evennumbersum 的時候，又要重新let sum ＝ 0？  </blockquote>
  <h4 id="section-3">問題描述</h4>
  <p>勉強算是清楚，但最大的問題是缺乏 context，我知道他在講我曾經寫過的程式碼，但我不知道是哪一段，而且我也忘記原本的程式碼長怎樣了</p>
  <h4 id="section-4">程式碼</h4>
  <p>完全沒有附，導致我不知道怎麼回答他</p>
  <h4 id="section-5">截圖與文字</h4>
  <p>無</p>
  <h4 id="section-6">分析</h4>
  <p>因為少了程式碼，所以我完全不知道該怎麼回答，因此我只能回：「你可能要附一下程式碼或是截圖喔」</p>
  <p>附截圖是因為在 Slack 上程式碼可能比較不容易觀看，所以附截圖會更清楚。但截圖的缺點就是只適合比較短的程式碼，而且沒辦法複製，因此我覺得程式碼跟截圖一起附上是比較好的。</p>
  <p>後來把截圖補上以後，我就有足夠資訊回答他的問題了。</p>
  <h3 id="section-7">範例二</h3>
  <blockquote>
卡關了QQ，為什麼我看不太懂我為什麼不能push?  </blockquote>
  <figure>
<img alt="" src="https://cdn-images-1.medium.com/max/570/1*8ST3u_p4sXaCnnqAlV2rGQ.png" />
  </figure>
  <h4 id="section-8">問題描述</h4>
  <p>因為有搭配截圖，所以看得出來他想問什麼，但資訊還是不足</p>
  <h4 id="section-9">程式碼</h4>
  <p>這題不需要</p>
  <h4 id="section-10">截圖與文字</h4>
  <p>無</p>
  <h4 id="section-11">分析</h4>
  <p>從截圖可以看出來，是在做 git push 的時候出錯，但除了截圖以外，應該要附上截圖中的重要資訊的文字版，所以應該要附上截圖中出現的 git repo 的網址，這樣我才能去 GitHub 看一下那個 repo 有沒有什麼異狀。</p>
  <p>再者，也應該一併附上之前下其他指令的截圖，才有辦法 debug。</p>
  <h4 id="section-12">範例三</h4>
  <blockquote>
目前在寫 week3 作業，但依照 ESlint 給的回饋修改程式碼後，仍有兩個錯誤，都是同樣的：error Parsing error: Unexpected token = （如圖所示）  </blockquote>
  <blockquote>
根據這個回傳的錯誤訊息，我找到 <a href="https://stackoverflow.com/questions/36001552/eslint-parsing-error-unexpected-token">stackoverflow 說是因為環境設置不同的關係</a>  </blockquote>
  <blockquote>
所以又找到<a href="https://lifesaver.codes/answer/standard-parsing-error-unexpected-token-=">這篇文章的解決方式</a>：修改 package.json，新增 standard，並在裡頭設置 parser: babel-eslint（如下）  </blockquote>
  <blockquote>
"standard": {<br /> "parser": "babel-eslint"<br /> }  </blockquote>
  <blockquote>
不過依然出現相同的 error 問題，也無法以 /* eslint-disable */ 阻止噴出這個錯誤。<br />所以來詢問是否有建議的解決方式  </blockquote>
  <figure>
<img alt="" src="https://cdn-images-1.medium.com/max/643/1*OWv0ptS2OvOo3KZ11FRbSg.png" />
  </figure>
  <h4 id="section-13">問題描述</h4>
  <p>描述的滿清楚的，而且有附上自己嘗試解決問題的過程。</p>
  <h4 id="section-14">程式碼</h4>
  <p>這題最大的重點在於從截圖中可以明確看出，這是 eslint 偵測到某一段程式碼不符合規則所以報錯，但因為沒有附上程式碼，所以無從 debug</p>
  <h4 id="section-15">截圖與文字</h4>
  <p>有截圖，但應該附上裡面的文字，也就是那個錯誤訊息的文字版</p>
  <h4 id="section-16">分析</h4>
  <p>既然錯誤跟程式碼有關，那就一定要附上程式碼，不然缺少必要資訊，沒辦法判斷問題在哪。</p>
  <p>於是我回說：「eslint 報錯一定是有原因的，錯誤訊息寫說是第10行那邊有出錯，但沒有看到程式碼沒辦法判斷原因，可以把程式碼 10 行左右那邊整個截圖貼上來，不然沒辦法判斷」</p>
  <p>後來學生把程式碼貼上，就能看到錯誤在哪邊，修掉之後就沒問題了。</p>
  <h4 id="section-17">範例四</h4>
  <blockquote>
大家安安<br />前幾天我寫好了第三週的功課，也都已經得到 LIOJ 的 AC，今天打算來把他們都通過 Eslint 的測試然後交作業。<br />結果今天再次測試的時候發現結果都變得怪怪的… 我在想會不會是因為我前天寫完作業之後更新了 Windows 10 的 2004 Build，另外今天 Command Line 也變得有點奇怪，我之前都是使用 Sublime Text 3 搭配 Git Bash 編寫程式，有人有遇到一樣的問題嗎？  </blockquote>
  <h4 id="section-18">問題描述</h4>
  <p>描述的滿不清楚，只有講「結果都變得怪怪的」，但卻沒有講說到底怎樣叫做怪怪的？是結果有出錯嗎？是出現奇怪的字元嗎？除非我會通靈，不然我不會知道。</p>
  <h4 id="section-19">程式碼</h4>
  <p>無</p>
  <h4 id="section-20">截圖與文字</h4>
  <p>無</p>
  <h4 id="section-21">分析</h4>
  <p>這題的資訊量不足，因為都只有講說「怪怪的」，卻沒有具體指出哪裡怪。應該附上的資訊為：</p>
  <ol>
    <li>之前是什麼樣子</li>
    <li>現在是什麼樣子，差別在哪</li>
    <li>預期中的結果是什麼</li>
    <li>相關程式碼與截圖</li>
  </ol>
  <p>這一題後來有其他同學幫忙解答，在獲得以上資訊之後，順利解決問題。</p>
  <h3 id="section-22">後記</h3>
  <p>再複習一次三大要素：</p>
  <ol>
    <li>問題描述</li>
    <li>程式碼</li>
    <li>截圖與文字</li>
  </ol>
  <p>除非你真的很有自信某一個不需要，不然請全部都附上。問題的完整度直接決定了這個問題是否能夠被快速且有效率地解決，有時候錯誤的問題只會引來錯誤的回覆（尤其是回答的人經驗不太夠的時候，這個在社群裡面很常出現），而更糟的是因為你也不知道那個回覆是錯的，所以也一起被帶偏了。</p>
  <p>不過我寫這篇文章不是叫大家停止問問題或是停止幫其他人解決問題啦，在一個學習氣氛良好的社群之下，是可以盡情發問跟解惑的，在 Lidemy 的社群裡面因為有我跟助教在，所以回答錯也沒關係，因為最後有人會跑出來給正確答案，點出錯誤在哪裡。</p>
  <p>還有一點想特別提的，是有關於回答問題。那就是儘管問問題的人給了許多資訊，你必須去意識到一件事，那就是「提問者給的資訊有可能是錯的」。這很重要，因為有些人會想說既然是提問者自己給的，那就一定 100% 是正確的，但事實往往不然。</p>
  <p>例如說可能會有這樣的提問：「我程式碼一開始都是好的，但是跑 eslint 把錯誤修正之後就壞了，可是邏輯我都沒動，只有加分號而已」，這時如果你完全相信他說的，就很有可能找不出問題在哪裡。</p>
  <p>因為有可能真相是，在修錯誤的時候，也有把某個變數修掉，所以不只是加分號而已，其實還有其他變動。提問者沒有騙你，因為他自己也忘記，或是根本沒有發現這件事。</p>
  <p>以這個觀點來看，我覺得回答問題可能可以分成幾個等級：</p>
  <ol>
    <li>Level1：根據提問者給的資訊回答，沒給的就回答不出來</li>
    <li>Level2：承上，但可以透過通靈推敲出沒給的資訊大概是什麼</li>
    <li>Level3：承上，而且可以分析出提問者給的某些資訊其實是錯的</li>
  </ol>
  <p>第三個 level 之所以難，是因為有可能他給的資訊是對的，而問題真正的根源是某個你想像不到的地方，所以你才會覺得他的說法不合理。</p>
  <p>最後做個總結，其實無論是提問或是回答問題都是需要經驗的累積，看過的問題愈多，自然就能夠愈快從過去的經驗中尋找答案，畢竟很多常見的問題都是類似的。提問也是，在一開始學程式時背景知識嚴重不足，所以不知道該怎麼提問其實也滿合理的，但是當你會的東西愈來愈多，你就會漸漸知道某些資訊是重要的，在提問的時候就會一併奉上。</p>
  <p>這篇如果之後有些案例會繼續更新，希望能整理得越來越完整。感謝 Lidemy，感謝助教以及學生們。</p>
<img src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=19f01b02f436" width="1" height="1" alt="" />
</div>]]></content><author><name>Huli</name></author><category term="Huli" /><category term="Huli" /><summary type="html"><![CDATA[那些可以問得更好的程式問題 ——]]></summary></entry><entry><title type="html">這邊其實不是「騙過瀏覽器」，比較像是騙過伺服器，跟瀏覽器沒關係</title><link href="https://nodebe4.github.io/oped2/2020-07-19/%E9%80%99%E9%82%8A%E5%85%B6%E5%AF%A6%E4%B8%8D%E6%98%AF-%E9%A8%99%E9%81%8E%E7%80%8F%E8%A6%BD%E5%99%A8-%E6%AF%94%E8%BC%83%E5%83%8F%E6%98%AF%E9%A8%99%E9%81%8E%E4%BC%BA%E6%9C%8D%E5%99%A8-%E8%B7%9F%E7%80%8F%E8%A6%BD%E5%99%A8%E6%B2%92%E9%97%9C%E4%BF%82/" rel="alternate" type="text/html" title="這邊其實不是「騙過瀏覽器」，比較像是騙過伺服器，跟瀏覽器沒關係" /><published>2020-07-19T09:56:56-05:00</published><updated>2020-07-19T09:56:56-05:00</updated><id>https://nodebe4.github.io/oped2/2020-07-19/%E9%80%99%E9%82%8A%E5%85%B6%E5%AF%A6%E4%B8%8D%E6%98%AF%E3%80%8C%E9%A8%99%E9%81%8E%E7%80%8F%E8%A6%BD%E5%99%A8%E3%80%8D,%E6%AF%94%E8%BC%83%E5%83%8F%E6%98%AF%E9%A8%99%E9%81%8E%E4%BC%BA%E6%9C%8D%E5%99%A8,%E8%B7%9F%E7%80%8F%E8%A6%BD%E5%99%A8%E6%B2%92%E9%97%9C%E4%BF%82</id><content type="html" xml:base="https://nodebe4.github.io/oped2/2020-07-19/%E9%80%99%E9%82%8A%E5%85%B6%E5%AF%A6%E4%B8%8D%E6%98%AF-%E9%A8%99%E9%81%8E%E7%80%8F%E8%A6%BD%E5%99%A8-%E6%AF%94%E8%BC%83%E5%83%8F%E6%98%AF%E9%A8%99%E9%81%8E%E4%BC%BA%E6%9C%8D%E5%99%A8-%E8%B7%9F%E7%80%8F%E8%A6%BD%E5%99%A8%E6%B2%92%E9%97%9C%E4%BF%82/"><![CDATA[<!--1595170616000-->
<p><a href="https://medium.com/@hulitw/%E9%80%99%E9%82%8A%E5%85%B6%E5%AF%A6%E4%B8%8D%E6%98%AF-%E9%A8%99%E9%81%8E%E7%80%8F%E8%A6%BD%E5%99%A8-%E6%AF%94%E8%BC%83%E5%83%8F%E6%98%AF%E9%A8%99%E9%81%8E%E4%BC%BA%E6%9C%8D%E5%99%A8-%E8%B7%9F%E7%80%8F%E8%A6%BD%E5%99%A8%E6%B2%92%E9%97%9C%E4%BF%82-d224539b7e9f?source=rss-f1fb3e40dc37------2">這邊其實不是「騙過瀏覽器」，比較像是騙過伺服器，跟瀏覽器沒關係</a>
——</p>

<div>
  <p>這邊其實不是「騙過瀏覽器」，比較像是騙過伺服器，跟瀏覽器沒關係</p>
<img src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=d224539b7e9f" width="1" height="1" alt="" />
</div>]]></content><author><name>Huli</name></author><category term="Huli" /><category term="Huli" /><summary type="html"><![CDATA[這邊其實不是「騙過瀏覽器」，比較像是騙過伺服器，跟瀏覽器沒關係 ——]]></summary></entry><entry><title type="html">你是對的！</title><link href="https://nodebe4.github.io/oped2/2020-06-28/%E4%BD%A0%E6%98%AF%E5%B0%8D%E7%9A%84/" rel="alternate" type="text/html" title="你是對的！" /><published>2020-06-28T07:17:51-05:00</published><updated>2020-06-28T07:17:51-05:00</updated><id>https://nodebe4.github.io/oped2/2020-06-28/%E4%BD%A0%E6%98%AF%E5%B0%8D%E7%9A%84!</id><content type="html" xml:base="https://nodebe4.github.io/oped2/2020-06-28/%E4%BD%A0%E6%98%AF%E5%B0%8D%E7%9A%84/"><![CDATA[<!--1593346671000-->
<p><a href="https://medium.com/@hulitw/%E4%BD%A0%E6%98%AF%E5%B0%8D%E7%9A%84-4122613b0150?source=rss-f1fb3e40dc37------2">你是對的！</a>
——</p>

<div>
  <p>你是對的！</p>
  <p>感謝糾錯，已修正</p>
<img src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=4122613b0150" width="1" height="1" alt="" />
</div>]]></content><author><name>Huli</name></author><category term="Huli" /><category term="Huli" /><summary type="html"><![CDATA[你是對的！ ——]]></summary></entry><entry><title type="html">那系列我有稍微看一下但沒仔細看XD 之後再找個時間仔細閱讀好了</title><link href="https://nodebe4.github.io/oped2/2020-06-26/%E9%82%A3%E7%B3%BB%E5%88%97%E6%88%91%E6%9C%89%E7%A8%8D%E5%BE%AE%E7%9C%8B%E4%B8%80%E4%B8%8B%E4%BD%86%E6%B2%92%E4%BB%94%E7%B4%B0%E7%9C%8BXD-%E4%B9%8B%E5%BE%8C%E5%86%8D%E6%89%BE%E5%80%8B%E6%99%82%E9%96%93%E4%BB%94%E7%B4%B0%E9%96%B1%E8%AE%80%E5%A5%BD%E4%BA%86/" rel="alternate" type="text/html" title="那系列我有稍微看一下但沒仔細看XD 之後再找個時間仔細閱讀好了" /><published>2020-06-26T06:35:04-05:00</published><updated>2020-06-26T06:35:04-05:00</updated><id>https://nodebe4.github.io/oped2/2020-06-26/%E9%82%A3%E7%B3%BB%E5%88%97%E6%88%91%E6%9C%89%E7%A8%8D%E5%BE%AE%E7%9C%8B%E4%B8%80%E4%B8%8B%E4%BD%86%E6%B2%92%E4%BB%94%E7%B4%B0%E7%9C%8BXD%20%E4%B9%8B%E5%BE%8C%E5%86%8D%E6%89%BE%E5%80%8B%E6%99%82%E9%96%93%E4%BB%94%E7%B4%B0%E9%96%B1%E8%AE%80%E5%A5%BD%E4%BA%86</id><content type="html" xml:base="https://nodebe4.github.io/oped2/2020-06-26/%E9%82%A3%E7%B3%BB%E5%88%97%E6%88%91%E6%9C%89%E7%A8%8D%E5%BE%AE%E7%9C%8B%E4%B8%80%E4%B8%8B%E4%BD%86%E6%B2%92%E4%BB%94%E7%B4%B0%E7%9C%8BXD-%E4%B9%8B%E5%BE%8C%E5%86%8D%E6%89%BE%E5%80%8B%E6%99%82%E9%96%93%E4%BB%94%E7%B4%B0%E9%96%B1%E8%AE%80%E5%A5%BD%E4%BA%86/"><![CDATA[<!--1593171304000-->
<p><a href="https://medium.com/@hulitw/%E9%82%A3%E7%B3%BB%E5%88%97%E6%88%91%E6%9C%89%E7%A8%8D%E5%BE%AE%E7%9C%8B%E4%B8%80%E4%B8%8B%E4%BD%86%E6%B2%92%E4%BB%94%E7%B4%B0%E7%9C%8Bxd-%E4%B9%8B%E5%BE%8C%E5%86%8D%E6%89%BE%E5%80%8B%E6%99%82%E9%96%93%E4%BB%94%E7%B4%B0%E9%96%B1%E8%AE%80%E5%A5%BD%E4%BA%86-f2994ccd54bc?source=rss-f1fb3e40dc37------2">那系列我有稍微看一下但沒仔細看XD 之後再找個時間仔細閱讀好了</a>
——</p>

<div>
  <p>那系列我有稍微看一下但沒仔細看XD 之後再找個時間仔細閱讀好了</p>
  <p>然後我覺得從別的語言借鑒過來的觀念這一點要看主題，畢竟大部分程式語言，對於一些基本東西的運作都是大同小異，比起建立一個只能適用在 JS 的模型，當然是先讓大家知道整體的觀念比較好，例如說 call stack 之類的東西</p>
  <p>除非是特別在談 JS 的文章然後把 JS 理解錯誤，那我可能才會想去回一下XD</p>
<img src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=f2994ccd54bc" width="1" height="1" alt="" />
</div>]]></content><author><name>Huli</name></author><category term="Huli" /><category term="Huli" /><summary type="html"><![CDATA[那系列我有稍微看一下但沒仔細看XD 之後再找個時間仔細閱讀好了 ——]]></summary></entry><entry><title type="html">從博物館寄物櫃理解變數儲存模型</title><link href="https://nodebe4.github.io/oped2/2020-06-24/%E5%BE%9E%E5%8D%9A%E7%89%A9%E9%A4%A8%E5%AF%84%E7%89%A9%E6%AB%83%E7%90%86%E8%A7%A3%E8%AE%8A%E6%95%B8%E5%84%B2%E5%AD%98%E6%A8%A1%E5%9E%8B/" rel="alternate" type="text/html" title="從博物館寄物櫃理解變數儲存模型" /><published>2020-06-24T20:40:01-05:00</published><updated>2020-06-24T20:40:01-05:00</updated><id>https://nodebe4.github.io/oped2/2020-06-24/%E5%BE%9E%E5%8D%9A%E7%89%A9%E9%A4%A8%E5%AF%84%E7%89%A9%E6%AB%83%E7%90%86%E8%A7%A3%E8%AE%8A%E6%95%B8%E5%84%B2%E5%AD%98%E6%A8%A1%E5%9E%8B</id><content type="html" xml:base="https://nodebe4.github.io/oped2/2020-06-24/%E5%BE%9E%E5%8D%9A%E7%89%A9%E9%A4%A8%E5%AF%84%E7%89%A9%E6%AB%83%E7%90%86%E8%A7%A3%E8%AE%8A%E6%95%B8%E5%84%B2%E5%AD%98%E6%A8%A1%E5%9E%8B/"><![CDATA[<!--1593049201000-->
<p><a href="https://medium.com/@hulitw/variable-and-frontdesk-a53a0440af3c?source=rss-f1fb3e40dc37------2">從博物館寄物櫃理解變數儲存模型</a>
——</p>

<div>
  <figure>
<img alt="" src="https://cdn-images-1.medium.com/max/1024/0*lSnFhHjWE7pLTNvt" />    <figcaption>
Photo by <a href="https://unsplash.com/@marko36?utm_source=medium&amp;utm_medium=referral">Mar Ko</a> on <a href="https://unsplash.com?utm_source=medium&amp;utm_medium=referral">Unsplash</a>
    </figcaption>
  </figure>
  <p>變數是絕大多數的人在學程式的時候，第一個或是第二個會碰到的東西。變數本身的概念不難，許多書上都拿「箱子」來比喻，就是個放東西的箱子而已。可是當後續講到什麼 call by reference 還是 call by value，或者是 C 語言的指標的時候，變數這東西的難度就突然成指數型增加。</p>
  <p>而我認為之所會這樣子，就是因為沒有把「變數的儲存模型」建立起來的關係。所以這個模型至關重要，一旦有了這個模型的概念，在思考相關問題時只要能想到這個模型，問題就大概解開一半了。因此這一篇試著用比較淺顯易懂的角度，來講一下這個變數的儲存模型長什麼樣子。</p>
  <p>核心概念是：</p>
  <blockquote>
我們應該要用什麼角度去理解變數，以及變數儲存的東西？  </blockquote>
  <p>先聲明一下，每種程式語言的儲存模型可能都不太一樣，而這篇也是經過簡化後的版本，實際上可能會複雜許多。但因為這篇的重點不在於「深入」，所以有許多東西都不會講到（例如說 stack frame、heap、constant pool，這些都不會提），只講我認為剛開始接觸程式時應該知道的東西，至少能把最基本的模型建立起來，日後再繼續擴張這個模型。</p>
  <p>然後這篇的程式碼會以 JavaScript 為主。</p>
  <h3 id="section">從博物館寄物櫃開始</h3>
  <p>不知道大家有沒有去過一些有寄物櫃的地方？</p>
  <p>我這邊講的不是健身房或是車站會看到的那種置物櫃，不是那種投幣以後讓你把東西放裡面，然後給你一個鑰匙的那種。那是自助式的置物櫃，我要談的不是那種。</p>
  <p>我講的是有一個櫃檯，有幾個服務人員會站在那邊，你要把東西交給他們，他們會幫你放到身後的櫃子（或是隔壁的小房間），接著會把一個號碼牌給你，的那種寄物櫃。</p>
  <p>突然想起來我在有些飯店也有看過類似的，不過我上一次看到是我<a href="https://medium.com/@hulitw/travel-part2-818482a90bc9">之前</a>去阿布達比的某個博物館的時候，在進去參觀以前就強迫要把身上比較大型的物件寄在櫃台，沒辦法帶進去。</p>
  <p>其實這種作法在許多博物館滿常見的，可能是怕你背著包包之類的，一不小心在轉身時可能就會撞到物品吧？因此一定要你把東西寄著，不能帶進去。</p>
  <figure>
<img alt="" src="https://cdn-images-1.medium.com/max/1024/1*X940JtYurJJKYCHo_pUm2g.png" />    <figcaption>
寄物櫃示意圖，我是不是應該先去學畫畫再來寫這篇文章？
    </figcaption>
  </figure>
  <p>先讓我們想像有一間神奇的博物館，裡面有種某種魔力，讓進去的人都會短暫失憶，可能會忘記住址、手機，或是自己的名字（你的名字好看，讚）。</p>
  <p>所以大家在進去博物館以前除了把身上的大型物件寄放在櫃台以外，還可以把這些個人資訊告訴服務人員，然後服務人員會把它寫在一張紙上，一樣放到後面的格子去。由於服務人員四個字有點多，我們之後就簡稱他叫做小博吧。</p>
  <p>詳細流程是這樣的，要進去的觀光客會先到櫃台把自己的個人資訊告訴小博，這邊先假設是「名字」好了，例如說這個客人叫做「亞圖姆」，那小博就會撕下手邊的便條紙，在上面寫下「亞圖姆」三個字，然後放到某一格置物櫃去。</p>
  <p>置物櫃都有編號，先假設這個編號是 A（對，用英文字母來排，而不是數字），接著小博就會拿編號 A 的號碼牌給亞圖姆，亞圖姆就開開心心進去博物館體驗魔力，跟著魔力一起轉圈圈了。</p>
  <p>當亞圖姆出來的時候，就可以拿著這張編號是 A 的號碼牌給小博，小博去編號 A 的格子拿出紙條，然後告訴他說：「你的名字是…亞圖姆」，亞圖姆就可以成功想起自己的名字，開開心心地回家去。</p>
  <p>除了名字以外，也可以寫自己的手機號碼，假設有一個人的手機號碼是 3345678，而且他特別叮嚀十點過後不要打給他，那小博就會把這個號碼寫在便條紙上，然後一樣放到某個格子去。這邊假設放到的是 B 格子好了，那當這個人逛完回來的時候，只要問小博：「B 格子放的東西是什麼？」，就可以找回自己的手機，如圖所示：</p>
  <figure>
<img alt="" src="https://cdn-images-1.medium.com/max/1024/1*QPUCWga-sa4DSy8bEl4ABA.png" />    <figcaption>
把電話號碼的便條紙放在 B 格子裡面
    </figcaption>
  </figure>
  <p>既然姓名跟手機可以放，那生日當然也可以。假設小花是 9/10 生的，告訴小博這個資訊以後，他就會把 9/10 寫下來，放到 C 格子去（他想放哪就放哪，不按照順序也可以），然後把 C 格子的號碼牌拿給小花。</p>
  <p>可是，那如果碰到同月同日生的人怎麼辦呢？假設今天有個人叫做小草，他也是 9/10 生的，那會發生什麼事情？</p>
  <p>小博有兩個選擇：</p>
  <ol>
    <li>看看格子中有沒有已經存在的生日，有的話就一樣拿同個號碼牌給他</li>
    <li>把 9/10 再寫一次，然後再找個格子放</li>
  </ol>
  <p>如果是你，你會選哪個？</p>
  <p>我跟小博的選擇是一樣的，就是選項 2，把 9/10 再寫一次，然後找個格子放。原因很簡單，因為我不可能去看現存的格子有沒有東西，這太耗時間了，不如直接寫一個比較快，所以就會變成這樣：</p>
  <figure>
<img alt="" src="https://cdn-images-1.medium.com/max/1024/1*i45ZQe6Awy_Ml14xxrqGjA.png" />    <figcaption>
C 跟 D 兩個格子都放了 9/10
    </figcaption>
  </figure>
  <p>所以，小花 9/10 生，資訊被放在 C 格子；小草也是 9/10 生，資訊被放在 D 格子。這時候如果你問小博：</p>
  <blockquote>
請問，C 格子跟 D 格子的內容一樣嗎？  </blockquote>
  <p>小搏的答案跟我又是一樣的了，真是有默契，答案是：「對，啊不然勒，不都是 9/10 嗎？」</p>
  <p>然後突然有個情況發生了，那就是小草在還沒進去博物館之前突然想起了什麼，匆匆忙忙的跑回來跟小博說：「欸不對，我記錯生日了啦，我的生日其實是 9/20，請幫我更正一下，我的格子是 D 格子」。</p>
  <p>僅管小博很疑惑為什麼有人連自己的生日也會記錯，但還是幫他改了生日，把 D 格子原本的便條紙拿出去，重新寫了一張 9/20 的放回去。</p>
  <figure>
<img alt="" src="https://cdn-images-1.medium.com/max/1016/1*ppxsIZexIY8dBsvp__irKg.png" />    <figcaption>
生日變不一樣了
    </figcaption>
  </figure>
  <p>就在小草心滿意足，順利踏進博物館以後，原本以為可以偷懶一陣子的小博卻又有事情要處理了。這次來的是小草的青梅竹馬：小梅，除了家裡就住隔壁以外，因為他們兩個生日一樣的關係，從小就特別親近，感情就特別好。</p>
  <p>小梅這次不直接講自己的生日，而是跟小博說：</p>
  <blockquote>
我跟小草，對，就是剛那個 D 格子的同一天生，麻煩你囉！  </blockquote>
  <p>此時小博一樣有兩個選擇：</p>
  <ol>
    <li>直接把 D 格子的號碼牌拿給小梅</li>
    <li>去 D 格子看小草的生日，再拿一張便條紙出來抄，然後再找個格子放</li>
  </ol>
  <p>選項 1 看起來很方便，但會有個問題。那就是，如果小草或是小梅過幾秒又跑回來，說自己記錯生日怎麼辦？那還不是要重新寫一張然後再找一個格子。那不如就維持之前的作法，再找一個格子，這樣每個人一個格子也比較不會搞錯。</p>
  <p>於是，格子就變成這樣了：</p>
  <figure>
<img alt="" src="https://cdn-images-1.medium.com/max/1008/1*t0WLhzIS28lH5ABUEG6n8A.png" />    <figcaption>
三個人的格子
    </figcaption>
  </figure>
  <p>C 格子是小花的 9/10，D 是小草的 9/20，E 是小梅的 9/20。皆大歡喜，可喜可賀，每個人都有一個專屬於自己的格子，而且不會干擾到別人的。</p>
  <h3 id="section-1">中場休息時間</h3>
  <p>小博的做事原則很簡單，就是：</p>
  <ol>
    <li>每一項資訊就是一個格子</li>
    <li>格子之間互不干擾，因為格子不會被共用</li>
  </ol>
  <p>所以儘管同一天生，也是兩個格子。</p>
  <p>而上面這些範例，其實就是在講變數的賦值。例如說：</p>
  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var A = '亞圖姆'</code></pre></div>  </div>
  <p>就是一開始的：「把亞圖姆這個名字（字串）放到 A 格子裡面」。</p>
  <p>之後小花與小草一開始的範例就是：</p>
  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var C = '9/10'var D = '9/10'</code></pre></div>  </div>
  <p>此時 C 格子跟 D 格子的內容是不是相等？是，所以 C 跟 D 是相等的，因為格子裡的東西相同。</p>
  <p>而小草後來更改生日，就只是：</p>
  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>D = '9/20'</code></pre></div>  </div>
  <p>把 D 格子裡面的東西換掉，完全不會影響到其他格子，所以 C 格子依然是 9/10，而現在 C 格子跟 D 格子就不相等了。</p>
  <p>最後小梅說的：「我跟小草同一天生」，其實就是：</p>
  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var E = D</code></pre></div>  </div>
  <p>讓 E 格子的內容跟 D 格子一樣，所以會把 D 格子的內容重新寫一次，再放到 E 格子去。因此 D 格子跟 E 格子的內容就一樣了，都是 9/20。此時如果把 D 格子的內容改掉，也不會影響到 E 格子，就如同我們前面講過的一樣，格子之間互不干擾。</p>
  <p>好，講到這邊相信大家應該都 ok，謹記兩個原則就對了：</p>
  <ol>
    <li>每一項資訊就是一個格子</li>
    <li>格子之間互不干擾，因為格子不會被共用</li>
  </ol>
  <p>接著，就讓我們來看複雜一點的範例。</p>
  <h3 id="section-2">背包問題</h3>
  <p>有些人可能會覺得奇怪，博物館的這種寄物區到底記這些資訊要幹嘛，不是說好要「寄物」嗎？那物品在哪邊？說好的大型物件呢？</p>
  <p>先別急，這不就來了嗎。</p>
  <p>今天是個嶄新的一天，而昨天已經來過的小花，今天居然又來造訪一次。這次因為是學校下課以後直接過來博物館，所以身上背著又重又大的書包，是一定要寄放在櫃台的，不然可能會把一堆展覽品撞壞。</p>
  <p>像是這種大型物件，不會直接放到櫃台後面的櫃子裡面，因為它太大了，所以這種櫃子放不下，而且這種東西通常比較貴重，如果放在外面有機率會被偷走，不能冒這種風險。那要放哪裡呢？</p>
  <p>還記得前面畫的圖裡面，右邊有一個門嗎？門後面其實就是存放大型物件的空間，比較大的東西都會放在那裡。而那邊的置物區也有編號，我們就用數字來編號好了：</p>
  <figure>
<img alt="" src="https://cdn-images-1.medium.com/max/1024/1*kwlnjQJ9fUZUqHvH1KK6zA.png" />    <figcaption>
左邊是一般寄物區，右邊是放大型物件用的，是門裡面的區域
    </figcaption>
  </figure>
  <p>那當遊客有大型物件需要存放的時候，會怎麼運作呢？</p>
  <p>其實就跟之前要來寄放名字、電話以及生日差不多，只是多了一個流程而已。小博會先把小花的書包拿到小房間裡面，並且找一個空的櫃子放著，例如說是 1 號櫃子好了，他就會在便條紙上面用紅筆寫下：1，然後找一個空的格子放，例如說 A 格子，然後一樣把 A 格子的號碼牌交給小花。</p>
  <figure>
<img alt="" src="https://cdn-images-1.medium.com/max/1024/1*KfPioUZHgl4tub9k6W7FDQ.png" />    <figcaption>
1 號櫃子裡的真的是包包，不是有腳的飯糰或是粽子
    </figcaption>
  </figure>
  <p>為什麼要用紅筆寫呢？因為其他遊客可能也會想要存「1」這個資訊，例如說他小孩 1 歲之類的。如果都用同樣顏色的筆來寫，那小博怎麼知道這個 1 代表的是資訊的 1，還是小房間櫃子的 1？因此要特別區分開來，用紅色來代表「這是櫃子編號，不是一般的資訊」。</p>
  <p>你可能會想說，那小博幹嘛這麼大費周章，還要把 1 存到 A 格子裡，再把 A 格子的號碼牌交給小花，為什麼不直接把「1 號櫃子的號碼牌」給小花就好。</p>
  <p>你這問題問得好，答案是：</p>
  <blockquote>
因為小房間裡的櫃子沒有號碼牌。  </blockquote>
  <p>只有外面櫃台後面的格子有相對應的號碼牌可以交給遊客，所以只能用這種比較迂迴的方式來處理，先把東西放到櫃子，再把櫃子編號寫下來，放到空的格子去，然後再把格子的號碼牌交給遊客。</p>
  <p>當小花逛完博物館出來的時候，就要把手中的 A 格子號碼牌拿給小博，小博就會去看 A 格子的內容，發現是用紅筆寫的字，代表說：「這個東西在小房間櫃子裡」，然後看到字是 1，就走去小房間，把編號是 1 的櫃子裡的東西拿出來（也就是綠色包包），然後交給小花。</p>
  <p>這個流程對於「增加物品」也是一樣的。</p>
  <p>例如說小花寄放完包包以後過了兩分鐘，覺得博物館比想像中的熱，於是想要把身上的羽絨外套放進包包裡面，所以就去找小博，跟小博說：「可以把這個外套放進我的包包嗎？我包包放在 A 格子」</p>
  <p>小博拿了外套以後，就去 A 格子看，看完 A 格子是紅筆寫的 1，於是就跑去小房間，把外套塞進編號 1 的櫃子，走出來跟小花說：「我幫你放進去囉」。</p>
  <p>這都是一樣的流程，不過有一點特別要注意。</p>
  <p>那就是，為什麼小花會說「我包包放在 A 格子」，而不是「我包包放在 1 號櫃子」呢？</p>
  <p>因為，小花就只拿到 A 格子的號碼牌，他自然就以為自己的包包在 A 格子那裡，這很合理吧？對於遊客來說，他根本不清楚博物館的運作，也不太知道小房間裡面有櫃子這件事，更不知道用紅筆寫櫃子編號代表的意義。但是對小博來說，是不一樣的，東西實際上是在小房間，所以他必須走去小房間，才能進行相對應的動作。</p>
  <p>所以對小花來說是一個步驟：「從 A 格子拿東西」，對小博來說則是兩個：「從 A 格子拿東西，發現 A 格子說東西在小房間櫃子 1，所以去小房間拿」。</p>
  <p>會有這個差別，就是因為 A 格子「存放的內容」不一樣。原本很單純只存放資訊，例如說生日、電話或是姓名，小博只要看完 A 格子的內容，就可以告訴來詢問的人。但如果是大型物件的話，存放的內容其實只是一個「編號」，或我們其實可以說是一個「指引」，格子裡面的東西指引小博前往另外一個地方，前往物品真正存放的地方。</p>
  <p>在 JavaScript 裡面，當你要儲存一個陣列或是物件的時候也是一樣的：</p>
  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var A = [1, 2, 3]</code></pre></div>  </div>
  <p>對你來說，你以為跟之前存字串沒有差別，可是其實有。你之前存字串的時候，就是直接在 A 格子裡面放 “9/10” 這個字串。而現在存這個大型物件（陣列）的時候，底層的運作其實是先把 [1, 2, 3] 這個東西放到小房間編號是 1 的櫃子裡，然後再在 A 格子裡面放著用紅筆寫下「1」的便條紙。</p>
  <p>所以你以為 A 格子裡面是你的東西，是 [1, 2, 3]，但不是。A 格子裡面其實只是一個編號，一個指引，你真正存放的東西其實是在隔壁小房間的 1 號櫃子。</p>
  <p>好，接著讓我們拉回來博物館這邊。</p>
  <p>除了小花以外，昨天有來過的小草又再來了一次（就是跟小梅是青梅竹馬的那個），而且很巧地，他居然背了一個跟小花一模一樣的綠色包包！想當然耳，這個包包也是一定要寄放在寄物區的。</p>
  <p>於是小草就把包包拿給小博，而小博照著一樣的流程去跑：</p>
  <ol>
    <li>包包是大型物件，要放進小房間，所以先走進小房間</li>
    <li>找一個空的櫃子放進去，就放 2 號櫃好了</li>
    <li>用紅筆在便條紙上寫下 2，放進空的格子，就放 B 吧</li>
    <li>把 B 的號碼牌拿給小草</li>
  </ol>
  <figure>
<img alt="" src="https://cdn-images-1.medium.com/max/1024/1*k1aTF7hAS8JaiuL7g7N2Kg.png" />    <figcaption>
一樣的包包，放在不同櫃子，不同格子
    </figcaption>
  </figure>
  <p>今天你如果問小博：</p>
  <blockquote>
A 格子跟 B 格子裡的東西一樣嗎？  </blockquote>
  <p>答案當然是：No！不一樣！</p>
  <p>一個裡面放著寫有 1 的便條紙，一個裡面放著寫有 2 的便條紙，怎麼會一樣？如果用程式碼來說明，就是這樣子：</p>
  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var A = [1, 2, 3]var B = [1, 2, 3]console.log(A == B) // false</code></pre></div>  </div>
  <p>前面有說過了，A 格子裡面放的是編號 1，真正的 [1, 2, 3] 在小房間櫃子 1，而 B 格子放的是編號 2，真正的 [1, 2, 3] 在小房間櫃子 2。所以 A 格子的內容（編號 1）跟 B 格子的內容（編號 2）一樣嗎？當然不一樣，而 == 與 === 都是去看<strong>格子裡的內容</strong>是否相等，所以會回傳 false。</p>
  <p>那有沒有什麼內建的方法，不是去檢查「格子的內容」，而是去檢查 A 格子「所代表的東西」與 B 格子「所代表的東西」是否相等？沒有。</p>
  <p>小博也不會去幹這種事。當有人問他 A 格子跟 B 格子是不是一樣的時候，他只要回頭看一下裡面放的內容，發現編號不一樣就可以跟你說不一樣了。如果要檢查「真正存放的大型物件」是否相等，他還要把編號記住，然後走進小房間裡面去看，還要仔細去檢查這兩個東西是不是真的一模一樣，顏色一樣、款式一樣、大小一樣…這花太多時間太麻煩了，所以他不會做這件事，而你寫的程式語言通常也不會。</p>
  <h4 id="section-3">青梅竹馬再次登場</h4>
  <p>在小草把物品放好，正準備離開要去逛博物館的時候，他的青梅竹馬小梅又出現了。小梅認識小草已經好多年了，深知小草的個性以及各種毛病，其中最令人擔心的就是：「容易把東西搞丟」，丟手機、鑰匙那都不算什麼，你想得到的東西，小草都搞丟過；你想不到的東西，小草也搞丟過，例如說朋友的小孩、公司準備要發的年終獎金、老闆的假髮，以及一架鋼琴。</p>
  <p>所以小梅知道，小草很有可能也會把手中的 B 格子號碼牌搞丟。一搞丟了就很麻煩，因為這取物是認號碼牌不認人的，號碼牌一丟了，就沒辦法證明包包是小草的，於是包包也丟了。</p>
  <p>小梅心想這樣不行，於是跟小博說：「我們兩個一起來的，你也給我一張 B 格子的號碼牌吧！」</p>
  <p>還記得一開始的時候也有過類似的情況嗎？小梅跟小博說他跟小草同一天生，而那時小博有兩個選擇：</p>
  <ol>
    <li>直接把格子的號碼牌拿給小梅</li>
    <li>去格子看小草的生日，再拿一張便條紙出來抄，然後再找個格子放</li>
  </ol>
  <p>這一次小博也有兩個選擇：</p>
  <ol>
    <li>直接把 B 格子的號碼牌拿給小梅</li>
    <li>去格子看小草的背包放哪裡，再拿一張便條紙出來抄，然後再找個格子放</li>
  </ol>
  <p>上次小博選了 2，而這一次小博同樣也選了 2，因為這樣規則就都是同一個，不會變來變去的，好記很多：</p>
  <ol>
    <li>每個格子只會有一個號碼牌</li>
    <li>如果有人說他想共用格子，那就拿一張便條紙把格子內容記下來，然後再找個格子放</li>
  </ol>
  <p>上次的同一天生日是這樣，這次的包包也是。</p>
  <p>所以小博去看了 B 格子的內容，發現是紅筆寫的 2，就再拿了一張便條紙用紅筆寫了 2，然後找了個空的格子 C，把便條紙放進去，然後把 C 的號碼牌交給小梅：</p>
  <figure>
<img alt="" src="https://cdn-images-1.medium.com/max/1024/1*28C0P6J3KO7lPNPGJa0G6A.png" />    <figcaption>
B 跟 C 格子裡面現在都是 2 了
    </figcaption>
  </figure>
  <p>所以如果 B 號碼牌被小草搞丟了，沒關係，小梅手上有一個 C 號碼牌，而用 C 號碼牌去取物的時候，一樣可以取到小草的包包，因為這兩個格子裡面存的內容都是「編號 2 的櫃子」。</p>
  <p>這就跟下面程式碼是一樣的：</p>
  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var B = [1, 2, 3]var C = Bconsole.log(B == C) // true</code></pre></div>  </div>
  <p>而且還有一個重點，那就是你更改 C 的話，也會更改到 B：</p>
  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var B = [1, 2, 3]var C = BC.push(4)console.log(B) // [1, 2, 3, 4]</code></pre></div>  </div>
  <p>這很合理嘛！因為這就是往包包放東西啊！</p>
  <p>今天小梅跟小博說：「幫我把這把雨傘放進我包包裡，我包包在 C 格子」，小博就會去看 C 格子，發現寫著編號 2，就進小房間去找編號 2 的櫃子，然後把雨傘放進櫃子裡的包包。</p>
  <p>啊這個包包就是小草的包包，所以小草的包包裡多了一把雨傘，這個十分合理。無論跟小博說要把東西放進 B 格子還是 C 格子，對小博來說都是一樣的，因為這兩個格子放的都是「前往編號 2 的櫃子的指引」，所以最後找到的都是同一個包包。</p>
  <p>好，現在最後一個問題來了：</p>
  <blockquote>
那如果小梅突然有一個自己的包包想要放呢？  </blockquote>
  <p>這跟前面提到的一個案例差不多但是有一點出入，前面講生日那邊，有說到小草先說自己是 9/10 生，接著小草又說自己記錯了，其實是 9/20。</p>
  <p>在這個情況下，當時小博的選擇很簡單，就是<strong>把小草格子的內容改成 9/20</strong>。現在也是一樣的。</p>
  <p>如果小梅有一個自己的包包想要放，那小博就會先把小梅的包包拿進去小房間，找一個空的櫃子，假設是 3，然後把原本小梅的 C 格子的內容改成 3，也就是這樣：</p>
  <figure>
<img alt="" src="https://cdn-images-1.medium.com/max/1024/1*WUXsgQEdIL4W61SEAWl5xA.png" />    <figcaption>
多了一個物品，格子的內容也被改變
    </figcaption>
  </figure>
  <p>那為什麼不是直接塞進去原本的櫃子 2 呢？因為櫃子很小，只能放一個物品而已，所以沒辦法放進去。如果要放進去，就只能把原本小草的包包丟出來才做得到。</p>
  <p>所以小梅的包包就被放進新的櫃子，然後 C 格子裡的編號也換了。如此一來，B 跟 C 格子就是兩個完全不同的格子了，而且也不會互相干涉。</p>
  <p>所以「放一個全新的包包」跟「往包包裡面塞東西」是不同的兩件事。</p>
  <p>用程式碼來講就是這樣：</p>
  <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>var B = [1, 2, 3]var C = BC = [4, 5, 6] // 新的包包，而不是往原本的包包塞東西console.log(B) // [1, 2, 3]</code></pre></div>  </div>
  <p>C 格子的內容變成新的編號，而原本的 B 格子的內容並不會被影響到。現在如果往 B 格子放東西，就會放到小草的包包；如果往 C 格子放東西，就會放到小梅的包包。</p>
  <p>最後讓我們來總結一下小博做事的 SOP，先從簡單的開始：</p>
  <ol>
    <li>如果客人放的不是大型物件，就直接在便條紙用普通的筆寫下資訊</li>
    <li>把便條紙放進去空的格子，然後把格子的號碼牌交給客人</li>
    <li>如果有人想放一樣的資訊，就把格子的內容抄起來，然後再放到新的空格子去</li>
    <li>如果有人想更改資訊，就把格子的內容直接改掉</li>
  </ol>
  <p>那如果是大型物件的話，就是：</p>
  <ol>
    <li>把東西先放到小房間空的櫃子，並且拿一張便條紙用紅筆寫下編號</li>
    <li>把便條紙放進去空的格子，然後把格子的號碼牌交給客人</li>
    <li>如果有人想共用同一個東西，就把格子的內容抄起來，然後再放到新的空格子去</li>
    <li>如果有人想更改資訊，就把格子的內容直接改掉</li>
  </ol>
  <p>看了看你會發現，其實對待一般的東西跟大型物品只有一個差別，那就是一般的東西，格子裡就是真正的資訊，而大型物品只是放一個「指引」，真正的物品其實是在隔壁小房間裡。</p>
  <h4 id="section-4">回歸到程式</h4>
  <p>在 JavaScript 裡面也是差不多的，當你想要存一般的資訊（數字、字串等等）的時候，變數裡面存的內容就真的是那個資訊。</p>
  <p>但如果你想存物件或陣列的時候，變數裡面存的內容其實是「指引」，是前往某個小房子櫃子的指引。只是你在用的時候從外表看不出來，因為你是小草，是小梅，不是小博。</p>
  <p>只有小博知道格子裡放的是指引，知道你的東西其實是在隔壁小房間，而你只會知道你有格子的號碼牌，而不知道你的東西真正放在哪裡。</p>
  <p>在這個故事中，格子就代表著不同的變數，變數 A、B、C…而格子的內容就是變數裡面存放的資訊。然後小房間裡的櫃子編號，其實代表著就是記憶體位置。</p>
  <p>這就是我一直跟學生講的：一般的東西存資訊，物件存記憶體位置。</p>
  <p>而我前面反覆提到的「指引」兩個字，其實可以直接代換成「指標」，對，就是 C 語言裡面那個指標。一般的變數存資訊，而指標存的是記憶體位置，這是他跟其他變數最大的差異。</p>
  <h3 id="section-5">總結</h3>
  <p>再次強調一下，這個模型其實是不精確的，但這篇文章想傳達的最重要的概念，就是那個「指引」的概念。有些物品不是直接放在格子，而是放在其他地方，格子裡面放的只是一個指引，一個指示，或是一個指標。</p>
  <p>還有另一個想傳達的概念就是：「往包包放東西（C.push(2)）」跟「放一個新的包包（C = [4, 5, 6]）」是兩件完全不同的事，然後 C[0] =3，這也算是「往包包放東西」，而不是放新的包包。</p>
  <p>如果你想知道比較精確一點的模型，可能會長這樣：</p>
  <figure>
<img alt="" src="https://cdn-images-1.medium.com/max/903/1*XOgAsyigkL2Jpqf3pQsNkw.png" />    <figcaption>
巨大格子
    </figcaption>
  </figure>
  <p>其實沒有分什麼小房間跟格子，全部都是放在一起的，有一個超巨大的格子（就是記憶體啦），然後裡面會放很多東西（不過大型物件像是包包，的確會有自己的一區），而原本的格子名稱 A, B, C 其實只是一張貼紙而已，真正的格子都是用數字來編號的。</p>
  <p>所以放東西的流程就變成：</p>
  <ol>
    <li>小博先找到一個空的格子，在上面貼上標籤 A</li>
    <li>把資訊寫下來，放到格子裡</li>
    <li>把號碼牌 A 交給客人</li>
  </ol>
  <p>不過其實我想強調的核心概念是一樣的，就是「有些格子存的是記憶體位置，而不是普通的值」，所以比較精確一點的模型就稍微看過就好，我覺得不太影響理解。</p>
  <p>有些人可能會問說：「不過就是講個變數而已，有需要用那麼多篇幅嗎？」，我一開始也是這樣想，直到我碰到真的有這個需求的人。</p>
  <p>希望這一篇可以幫助大家更全面地去理解變數以及記憶體相關的概念，就不會再對那些程式碼的結果感到疑惑。</p>
  <p>也感謝程式導師實驗計畫第四期的學生與助教們，讓我有了這篇文章的靈感。</p>
<img src="https://medium.com/_/stat?event=post.clientViewed&amp;referrerSource=full_rss&amp;postId=a53a0440af3c" width="1" height="1" alt="" />
</div>]]></content><author><name>Huli</name></author><category term="Huli" /><category term="Huli" /><summary type="html"><![CDATA[從博物館寄物櫃理解變數儲存模型 ——]]></summary></entry></feed>